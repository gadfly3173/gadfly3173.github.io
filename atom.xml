<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猪蹄宝宝的博客n(*≧▽≦*)n</title>
  
  
  <link href="https://blog.gadfly.vip/atom.xml" rel="self"/>
  
  <link href="https://blog.gadfly.vip/"/>
  <updated>2022-02-16T10:21:03.787Z</updated>
  <id>https://blog.gadfly.vip/</id>
  
  <author>
    <name>猪蹄宝宝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Re:从零开始的问卷模块</title>
    <link href="https://blog.gadfly.vip/2021/04/make-a-questionnaire-module-step-by-step/"/>
    <id>https://blog.gadfly.vip/2021/04/make-a-questionnaire-module-step-by-step/</id>
    <published>2021-04-28T10:10:36.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>问卷模块是我的毕业设计的一部分。毕设论文里要求代码不能超过三页，导致我写的时候很难受，在这里写上完整的设计实现思路。</p><span id="more"></span><p>项目地址：</p><ul><li>前端：<a href="https://github.com/gadfly3173/chakki-vue">https://github.com/gadfly3173/chakki-vue/</a></li><li>后端：<a href="https://github.com/gadfly3173/chakki-spring">https://github.com/gadfly3173/chakki-spring/</a></li></ul><p>要开发一个问卷模块，首先我们需要将问卷进行抽象，来理解一个问卷系统需要哪些数据。一个问卷中可能包含多个题目，他们可能是简答题或选择题等。一个选择题可能包含多个选项，问题可以限制选项被选择的数量。如果是矩阵选择题，那么选项将分为横轴与纵轴两种，两种选项可以两两组合变成一个唯一的选项。同时，所有的选项与问题都可以被排序。将这些条件抽象成树状的数据模型就可以是下图的形式。按照图示就可以很清晰地设计出数据库的表结构了。</p><p><img src="/images/227387.gif" data-original="/images/posts/2021/04/image-20210428182720196.png" alt="image-20210428182720196"></p><p>下面是数据库表结构：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>字段类型</th><th>是否为空</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td></td></tr><tr><td>title</td><td>varchar(60)</td><td>varchar</td><td>NO</td><td></td><td>问卷标题</td></tr><tr><td>info</td><td>varchar(255)</td><td>varchar</td><td>YES</td><td></td><td>问卷简介</td></tr><tr><td>class_id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td>对应班级</td></tr><tr><td>end_time</td><td>datetime(3)</td><td>datetime</td><td>YES</td><td></td><td></td></tr><tr><td>create_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>update_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>delete_time</td><td>datetime(3)</td><td>datetime</td><td>YES</td><td></td><td></td></tr></tbody></table><p>questionnaire表是问卷信息表，记录了问卷的标题、简介、所属的班级id、问卷的结束时间等信息。</p><table><thead><tr><th>列名</th><th>数据类型</th><th>字段类型</th><th>是否为空</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td></td></tr><tr><td>title</td><td>varchar(60)</td><td>varchar</td><td>NO</td><td></td><td>问题标题</td></tr><tr><td>questionnaire_id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td>对应问卷</td></tr><tr><td>order</td><td>tinyint(2)  unsigned</td><td>tinyint</td><td>NO</td><td></td><td>顺序编号</td></tr><tr><td>type</td><td>tinyint(2)  unsigned</td><td>tinyint</td><td>NO</td><td></td><td>问题类型：1-简答 2-选择</td></tr><tr><td>limit_max</td><td>tinyint(2)  unsigned</td><td>tinyint</td><td>YES</td><td></td><td>多选限制数量</td></tr><tr><td>create_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>update_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>delete_time</td><td>datetime(3)</td><td>datetime</td><td>YES</td><td></td><td></td></tr></tbody></table><p>questionnaire_question表是问题信息表，记录了问题的标题、对应的问卷id、排序、问题类型、上限等信息。</p><table><thead><tr><th>列名</th><th>数据类型</th><th>字段类型</th><th>是否为空</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td></td></tr><tr><td>title</td><td>varchar(60)</td><td>varchar</td><td>NO</td><td></td><td>选项内容</td></tr><tr><td>question_id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td>对应问卷</td></tr><tr><td>order</td><td>tinyint(2)  unsigned</td><td>tinyint</td><td>NO</td><td></td><td>顺序编号</td></tr><tr><td>create_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>update_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>delete_time</td><td>datetime(3)</td><td>datetime</td><td>YES</td><td></td><td></td></tr></tbody></table><p>questionnaire_question_option表是问卷的选择题的选项表，记录了选项名、对应的问题id、选项的排序等信息</p><table><thead><tr><th>列名</th><th>数据类型</th><th>字段类型</th><th>是否为空</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td></td></tr><tr><td>user_id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td>学生id</td></tr><tr><td>questionnaire_id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td>问卷id</td></tr><tr><td>ip</td><td>varchar(39)</td><td>varchar</td><td>YES</td><td></td><td></td></tr><tr><td>create_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>update_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>delete_time</td><td>datetime(3)</td><td>datetime</td><td>YES</td><td></td><td></td></tr></tbody></table><p> student_questionnaire表是学生与问卷的关系表，即学生的问卷提交记录，记录了用户id、问卷id、IP地址等信息。</p><table><thead><tr><th>列名</th><th>数据类型</th><th>字段类型</th><th>是否为空</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td></td></tr><tr><td>student_questionnaire_id</td><td>int(10)</td><td>int</td><td>NO</td><td></td><td>对应的学生提交信息id</td></tr><tr><td>question_id</td><td>int(10) unsigned</td><td>int</td><td>NO</td><td></td><td>问题id</td></tr><tr><td>answer</td><td>varchar(255)</td><td>varchar</td><td>YES</td><td></td><td></td></tr><tr><td>option_id</td><td>int(10) unsigned</td><td>int</td><td>YES</td><td></td><td></td></tr><tr><td>create_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>update_time</td><td>datetime(3)</td><td>datetime</td><td>NO</td><td>CURRENT_TIMESTAMP(3)</td><td></td></tr><tr><td>delete_time</td><td>datetime(3)</td><td>datetime</td><td>YES</td><td></td><td></td></tr></tbody></table><p>student_questionnaire_question_answer表是学生提交的每个问题的具体回答的记录表，记录了对应student_questionnaire的id、对应的问题id、简答题的回答内容、选择题的选项等信息。</p><p>sql建表语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ----------------------------</span><span class="token comment">-- 问卷表</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>questionnaire<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>questionnaire<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                              <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>title<span class="token punctuation">`</span>       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'问卷标题'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>info<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'问卷简介'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>class_id<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                              <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'对应班级'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>end_time<span class="token punctuation">`</span>    <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                   <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                   <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>    <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>title_del<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4  <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_general_ci  ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- 问题表</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>questionnaire_question<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>questionnaire_question<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>               <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                             <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>title<span class="token punctuation">`</span>            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'问题标题'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>questionnaire_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                             <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'对应问卷'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span>            <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                          <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'顺序编号'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">type</span><span class="token punctuation">`</span>             <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                          <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'问题类型：1-简答 2-选择'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>limit_max<span class="token punctuation">`</span>        <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                          <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'多选限制数量'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                  <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4  <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_general_ci  ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- 选项表</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>questionnaire_question_option<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>questionnaire_question_option<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                             <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>title<span class="token punctuation">`</span>       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'选项内容'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>question_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                             <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'对应问卷'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span>       <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                          <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'顺序编号'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                  <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4  <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_general_ci  ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- 学生-问卷 关系表</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>student_questionnaire<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student_questionnaire<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>               <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                             <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                             <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>questionnaire_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                             <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'问卷id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>ip<span class="token punctuation">`</span>               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                  <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4  <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_general_ci  ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- 问题-回答 关系表</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>student_questionnaire_question_answer<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student_questionnaire_question_answer<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>                       <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                              <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>student_questionnaire_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                              <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'对应的学生提交信息id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>question_id<span class="token punctuation">`</span>              <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                              <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'问题id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>answer<span class="token punctuation">`</span>                   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>option_id<span class="token punctuation">`</span>                <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span>                                              <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span>              <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span>              <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span>              <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                                                   <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4  <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_general_ci  ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据模型中我并没有写上序号一项，因为前端提交时是一个数组的形式，本身就带有数据索引，后端接收到数据后，只要将这个索引作为序号填入数据库即可。对于排序的工作，由前端实现即可。因此，我们可以给出发布问卷使用的json示例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"class_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"end_time"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"info"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"questions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"limit_max"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的实体类便是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * NewQuestionnaireDTO */</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"新建问卷DTO"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"问卷"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewQuestionnaireDTO</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"标题"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.title.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"简介"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.info.length&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"班级id"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"class_id"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"&#123;class.id.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;class.id.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> classId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"问题列表"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.length&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.length&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NewQuestionDTO</span><span class="token punctuation">></span></span> questions<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"结束时间"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"end_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> endTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * NewQuestionDTO */</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"新建问题DTO"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"问题"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewQuestionDTO</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"标题"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.question.title.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"类型"</span><span class="token punctuation">,</span> allowableValues <span class="token operator">=</span> <span class="token string">"1,2"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.question.type.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">QuestionTypeConstant</span><span class="token punctuation">.</span>TEXT<span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.question.type.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">QuestionTypeConstant</span><span class="token punctuation">.</span>SELECT<span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.question.type.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"上限，目前用于选择题"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"limit_max"</span><span class="token punctuation">,</span> allowableValues <span class="token operator">=</span> <span class="token string">"range[1,10]"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.question.limit.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.question.limit.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> limitMax<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"选项列表"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.question.option.limit&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NewOptionDTO</span><span class="token punctuation">></span></span> options<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * NewOptionDTO */</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"新建选项DTO"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"选项"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewOptionDTO</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"标题"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"&#123;lesson.questionnaire.question.option.title.not-null&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来给出service类的实现，controller就省略了。由于数据库表结构上文也已经给出，对应的model类DO也不再给出。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 问题类型常量 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuestionTypeConstant</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 简答     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TEXT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 选择     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SELECT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createQuestionnaire</span><span class="token punctuation">(</span><span class="token class-name">NewQuestionnaireDTO</span> dto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 插入问卷获取id</span>        <span class="token class-name">QuestionnaireDO</span> questionnaireDO <span class="token operator">=</span> <span class="token class-name">QuestionnaireDO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">classId</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getClassId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">endTime</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        questionnaireMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>questionnaireDO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 插入题目</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dto<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">NewQuestionDTO</span> questionDTO <span class="token operator">=</span> dto<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">QuestionnaireQuestionDO</span> questionnaireQuestionDO <span class="token operator">=</span> <span class="token class-name">QuestionnaireQuestionDO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">questionnaireId</span><span class="token punctuation">(</span>questionnaireDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span>questionDTO<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>questionDTO<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">limitMax</span><span class="token punctuation">(</span>questionDTO<span class="token punctuation">.</span><span class="token function">getLimitMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            questionnaireQuestionMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>questionnaireQuestionDO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果是选择题，且选项列表不为空则插入选项</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>questionDTO<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">QuestionTypeConstant</span><span class="token punctuation">.</span>SELECT                    <span class="token operator">&amp;&amp;</span> questionDTO<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>questionDTO<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> questionDTO<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">NewOptionDTO</span> optionDTO <span class="token operator">=</span> questionDTO<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">QuestionnaireQuestionOptionDO</span> questionnaireQuestionOptionDO <span class="token operator">=</span>                         <span class="token class-name">QuestionnaireQuestionOptionDO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">questionId</span><span class="token punctuation">(</span>questionnaireQuestionDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span>optionDTO<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    questionnaireQuestionOptionMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>questionnaireQuestionOptionDO<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到代码逻辑很简单，直接循环DTO中接收到的所有参数，一一对应插入数据库即可。因为DTO中没有给到排序编号，因此使用的是普通fori循环来得到数组每项的下标作为编号。</p><p>然后来看看前端部分，新建问卷页面关键代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; $route.params.id === '0' ? '新建' : '编辑' &#125;&#125;问卷<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deploy-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deploy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发布<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>问卷标题：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>medium<span class="token punctuation">"</span></span> <span class="token attr-name">clearable</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">:maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">show-word-limit</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>问卷简介：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>medium<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textarea<span class="token punctuation">"</span></span>          <span class="token attr-name">:autosize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; minRows: 2 &#125;<span class="token punctuation">"</span></span>          <span class="token attr-name">clearable</span>          <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span>          <span class="token attr-name">:maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>255<span class="token punctuation">"</span></span>          <span class="token attr-name">show-word-limit</span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>questions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toolbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-circle-plus-outline<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addTextQuestion<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>新建简答题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>              <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-circle-plus-outline<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addSelectQuestion<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>新建选择题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>              <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right-col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-scrollbar</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scrollbar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scrollbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mask top-mask<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>end-time-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                结束时间：                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span>                  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>endTime<span class="token punctuation">"</span></span>                  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>datetime<span class="token punctuation">"</span></span>                  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择日期时间<span class="token punctuation">"</span></span>                  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>                  <span class="token attr-name">:editable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                  <span class="token attr-name">:picker-options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pickerOptions<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!list || list.length === 0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hint-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                点击左侧按钮新建题目              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>draggable</span>                <span class="token attr-name">v-else</span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group<span class="token punctuation">"</span></span>                <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span>                <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>                <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dragOptions<span class="token punctuation">"</span></span>                <span class="token attr-name">handle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.handle<span class="token punctuation">"</span></span>                <span class="token attr-name">@start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drag = true<span class="token punctuation">"</span></span>                <span class="token attr-name">@end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drag = false<span class="token punctuation">"</span></span>              <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transition<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flip-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(element, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`question-$&#123;index&#125;`<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anticon icon-bars handle<span class="token punctuation">"</span></span>                      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; index + 1 &#125;&#125;.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span>                    <span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>question<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>question-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                          问题：                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>                          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title-input<span class="token punctuation">"</span></span>                          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入标题<span class="token punctuation">"</span></span>                          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>medium<span class="token punctuation">"</span></span>                          <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element.title<span class="token punctuation">"</span></span>                          <span class="token attr-name">:maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>                          <span class="token attr-name">clearable</span>                          <span class="token attr-name">show-word-limit</span>                        <span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>question-type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        类型：&#123;&#123; element.type | questionTypeFilter &#125;&#125;                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element.type === 2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>limit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                          选项可选数量上限：                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input-number</span>                            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>limit-max-input<span class="token punctuation">"</span></span>                            <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element.limit_max<span class="token punctuation">"</span></span>                            <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>                            <span class="token attr-name">controls-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>                            <span class="token attr-name">:step-strictly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                            <span class="token attr-name">:min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                            <span class="token attr-name">:max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>                          <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input-number</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                      <span class="token comment">&lt;!-- 选择题选项 --></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>question-options<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element.type === 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont icon-jia plus<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!element.options.length<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addOption(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option-row<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, key) in element.options<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option-hint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项&#123;&#123; key + 1 &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>                            <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.title<span class="token punctuation">"</span></span>                            <span class="token attr-name">:maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>                            <span class="token attr-name">show-word-limit</span>                            <span class="token attr-name">clearable</span>                            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入选项<span class="token punctuation">"</span></span>                            <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>medium<span class="token punctuation">"</span></span>                            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option-input<span class="token punctuation">"</span></span>                          <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>function<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont icon-jian1 minus<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeOption(index, key)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span>                              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont icon-jia plus<span class="token punctuation">"</span></span>                              <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key === element.options.length - 1 &amp;&amp; element.options.length &lt; 10<span class="token punctuation">"</span></span>                              <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addOption(index)<span class="token punctuation">"</span></span>                            <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-close<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeQuestion(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>draggable</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mask bottom-mask<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-scrollbar</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Class <span class="token keyword">from</span> <span class="token string">'@/model/class'</span><span class="token keyword">import</span> draggable <span class="token keyword">from</span> <span class="token string">'vuedraggable'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      title<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      info<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      endTime<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      drag<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      dragOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        animation<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        group<span class="token operator">:</span> <span class="token string">'description'</span><span class="token punctuation">,</span>        disabled<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        ghostClass<span class="token operator">:</span> <span class="token string">'ghost'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      pickerOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        shortcuts<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            text<span class="token operator">:</span> <span class="token string">'五分钟后'</span><span class="token punctuation">,</span>            <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">picker</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>              picker<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'pick'</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token comment">// 其他的自行撰写</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token function">disabledDate</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">24</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    draggable<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">currentClassId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>currentClassId    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">addTextQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        title<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">addSelectQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        title<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        limit_max<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">addOption</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        title<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">removeOption</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">removeQuestion</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">async</span> <span class="token function">getQuestionnaireVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// TODO 编辑问卷</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> Class<span class="token punctuation">.</span><span class="token function">getQuestionnaireVO</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> res<span class="token punctuation">.</span>title    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">async</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 发布问卷</span>          <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> Class<span class="token punctuation">.</span><span class="token function">createQuestionnaire</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>currentClassId<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>end_time<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">,</span>          <span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">&lt;</span> window<span class="token punctuation">.</span><span class="token constant">MAX_SUCCESS_CODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'问卷发布成功'</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 更新问卷</span>          <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> Class<span class="token punctuation">.</span><span class="token function">updateQuestionnaire</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">&lt;</span> window<span class="token punctuation">.</span><span class="token constant">MAX_SUCCESS_CODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'问卷修改成功'</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token operator">!==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getQuestionnaireVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.flip-list-move</span> <span class="token punctuation">&#123;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> transform 0.5s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.flip-list-enter-active</span> <span class="token punctuation">&#123;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> opacity 0.5s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.flip-list-enter</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.no-move</span> <span class="token punctuation">&#123;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> transform 0s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ghost</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #c8ebfb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #596c8e<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token selector">.header</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #dae1ec<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 59px<span class="token punctuation">;</span>    <span class="token selector">.title</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 59px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 59px<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> $parent-title-color<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> 500<span class="token punctuation">;</span>      <span class="token property">text-indent</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.deploy-button</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0 40px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 80px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token selector">.title-input</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 20px 20px 0<span class="token punctuation">;</span>      <span class="token selector">label</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.info-input</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px dashed #dae1ec<span class="token punctuation">;</span>      <span class="token selector">label</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.questions</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 150px<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token selector">/deep/ .el-row</span> <span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.toolbar</span> <span class="token punctuation">&#123;</span>        <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid #dae1ec<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token selector">.add-button</span> <span class="token punctuation">&#123;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>          <span class="token selector">.button</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.scrollbar</span> <span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token selector">/deep/ .el-scrollbar__wrap</span> <span class="token punctuation">&#123;</span>          <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.right-col</span> <span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.end-time-input</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #dae1ec<span class="token punctuation">;</span>        <span class="token selector">/deep/ .el-input__inner</span> <span class="token punctuation">&#123;</span>          <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.hint-box</span> <span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 20vh 0<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #dcdfe6<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.mask</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token selector">&amp;.top-mask</span> <span class="token punctuation">&#123;</span>          <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>          <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgb</span><span class="token punctuation">(</span>249<span class="token punctuation">,</span> 250<span class="token punctuation">,</span> 251<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>249<span class="token punctuation">,</span> 250<span class="token punctuation">,</span> 251<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">&amp;.bottom-mask</span> <span class="token punctuation">&#123;</span>          <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>          <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>249<span class="token punctuation">,</span> 250<span class="token punctuation">,</span> 251<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>249<span class="token punctuation">,</span> 250<span class="token punctuation">,</span> 251<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.list-group</span> <span class="token punctuation">&#123;</span>        <span class="token property">min-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token selector">.list-group-item</span> <span class="token punctuation">&#123;</span>          <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>          <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>          <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> 15px 0<span class="token punctuation">;</span>          <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>          <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px dashed #d5eae6<span class="token punctuation">;</span>          <span class="token selector">.handle</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span>            <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token selector">.order</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token selector">.el-icon-close</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #c7485b<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token selector">.question-title</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>            <span class="token selector">.label</span> <span class="token punctuation">&#123;</span>              <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">.title-input</span> <span class="token punctuation">&#123;</span>              <span class="token property">width</span><span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>              <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token selector">.question-type</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>            <span class="token selector">.limit</span> <span class="token punctuation">&#123;</span>              <span class="token property">padding-left</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>              <span class="token selector">.limit-max-input</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token selector">.question-options</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token selector">.iconfont</span> <span class="token punctuation">&#123;</span>              <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>              <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>              <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>              <span class="token selector">&amp;.plus</span> <span class="token punctuation">&#123;</span>                <span class="token property">color</span><span class="token punctuation">:</span> #3765b6<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token selector">&amp;.minus</span> <span class="token punctuation">&#123;</span>                <span class="token property">font-size</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> #c7485b<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">.option-row</span> <span class="token punctuation">&#123;</span>              <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>              <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>              <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>              <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>              <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>              <span class="token selector">.option-hint</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token selector">.option-input</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>                <span class="token property">margin-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token selector">.function</span> <span class="token punctuation">&#123;</span>                <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>                <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拖拽排序使用的是vuedraggable，使用方法请自行查阅官方文档。</p><p>学生提交问卷时，则需要上传问卷id、自己的回答列表即可。回答本身可能有简答与选择的选项两种情况，由于两者类型不同，因此使用两个不同的字段answer和option_id存储。对于学生提交问卷回答部分就不再展示代码，</p><p>教师查询学生的提交记录时则是下载一个包含所有提交记录的Excel文件。Excel的写入可以使用Apache POI来完成。Apache POI对Excel类型的文件有三种创建方式，HSSF、XSSF、SXSSF。HSSF是用于生成Office 97-2003的旧版本xls文件，XSSF用于生成新版本的xlsx文件，而SXSSF则是在XSSF的基础上进行扩展，可以避免过大的数据导致内存溢出。由于问卷是针对班级为单位发布的，数据量不会超过100行，因此使用XSSF形式进行生成即可。POI对Excel的操作是以行为单位的，每行每列都是从0开始。因此需要通过createRow方法先创建标题行，然后遍历学生提交的答案来填充数据，最后写入临时文件并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">FileExportBO</span> <span class="token function">getQuestionnaireReportFile</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 查询问卷本体</span>    <span class="token class-name">QuestionnaireVO</span> questionnaireVO <span class="token operator">=</span> questionnaireMapper<span class="token punctuation">.</span><span class="token function">getQuestionnaireVO</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询学生提交记录</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentQuestionnaireAnswerVO</span><span class="token punctuation">></span></span> answerVOList <span class="token operator">=</span> studentQuestionnaireMapper<span class="token punctuation">.</span><span class="token function">selectStudentQuestionnaireAnswerVO</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Apache POI 创建 Excel</span>    <span class="token class-name">XSSFWorkbook</span> wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">XSSFSheet</span> sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"Sheet 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置时间格式</span>    <span class="token class-name">XSSFCreationHelper</span> creationHelper <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getCreationHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CellStyle</span> cellStyle <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cellStyle<span class="token punctuation">.</span><span class="token function">setDataFormat</span><span class="token punctuation">(</span>creationHelper<span class="token punctuation">.</span><span class="token function">createDataFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 标题行</span>    <span class="token class-name">XSSFRow</span> titleRow <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    titleRow<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"学号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    titleRow<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 问题题目作为标题</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> questionnaireVO<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        titleRow<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"第%d题：%s"</span><span class="token punctuation">,</span>                i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                questionnaireVO<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    titleRow<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>questionnaireVO<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"提交时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 学生回答内容写入</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> answerVOList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">XSSFRow</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>answerVOList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>answerVOList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历问题</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> questionnaireVO<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 简答题写入answer</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>questionnaireVO<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">QuestionTypeConstant</span><span class="token punctuation">.</span>TEXT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>answerVOList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnswers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 选择题查询选项原文写入</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>questionnaireVO<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">QuestionTypeConstant</span><span class="token punctuation">.</span>SELECT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 初始化StringJoiner用来存放原文</span>                <span class="token class-name">StringJoiner</span> optionTitles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> optionId <span class="token operator">:</span> answerVOList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnswers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOptionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OptionVO</span> optionVO <span class="token operator">:</span> questionnaireVO<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 如果id相同就加一条</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>optionVO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>optionId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            optionTitles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>optionVO<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>optionTitles<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 写入创建时间</span>        <span class="token class-name">XSSFCell</span> datetimeCell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>questionnaireVO<span class="token punctuation">.</span><span class="token function">getQuestions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        datetimeCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>answerVOList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        datetimeCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 写入临时文件</span>    <span class="token class-name">File</span> excelFile <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>excelFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 格式化文件名</span>    <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"问卷调查结果_%s.xlsx"</span><span class="token punctuation">,</span> questionnaireVO<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">FileExportBO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>excelFile<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;问卷模块是我的毕业设计的一部分。毕设论文里要求代码不能超过三页，导致我写的时候很难受，在这里写上完整的设计实现思路。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Axios 发送请求时携带 Cookies</title>
    <link href="https://blog.gadfly.vip/2021/02/axios-xhr-with-cookie/"/>
    <id>https://blog.gadfly.vip/2021/02/axios-xhr-with-cookie/</id>
    <published>2021-02-26T09:58:13.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>前文提到过，Axios 的核心是 <code>XMLHttpRequest</code>。<code>XMLHttpRequest</code> 对象在默认情况下并不会发送 <code>Cookies</code>，需要设置 <code>withCredentials: true</code>才行。但是只有前端设置也是没有用的，涉及跨域的情况下，还需要后端配合。我用的是Spring，就用Spring的配置类演示了。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ajax 封装插件, 使用 axios</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> Config <span class="token keyword">from</span> <span class="token string">'@/config'</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  baseURL<span class="token operator">:</span> Config<span class="token punctuation">.</span>baseURL <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>apiUrl <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span>  timeout<span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 请求超时时间设置</span>  crossDomain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  withCredentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Check cross-site Access-Control</span>  <span class="token comment">// 定义可获得的http响应状态码</span>  <span class="token comment">// return true、设置为null或者undefined，promise将resolved,否则将rejected</span>  <span class="token function">validateStatus</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">510</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建请求实例</span><span class="token keyword">const</span> _axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">// 其他代码</span><span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment">// 跨域域名绝对不能配置为通配符，必须指定具体的域名，且http和https是算两个域名的，如果两个都要支持就都要写</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"http://localhost:18080"</span><span class="token punctuation">,</span> <span class="token string">"你的域名"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment">// 允许跨域接受Cookie</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">exposedHeaders</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>CONTENT_DISPOSITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://github.com/chinesedfan/You-Dont-Know-Axios">You Don’t Know Axios</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前文提到过，Axios 的核心是 &lt;code&gt;XMLHttpRequest&lt;/code&gt;。&lt;code&gt;XMLHttpRequest&lt;/code&gt; 对象在默认情况下并不会发送 &lt;code&gt;Cookies&lt;/code&gt;，需要设置 &lt;code&gt;withCredentials: t</summary>
      
    
    
    
    <category term="开发" scheme="https://blog.gadfly.vip/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="javascript" scheme="https://blog.gadfly.vip/tags/javascript/"/>
    
    <category term="axios" scheme="https://blog.gadfly.vip/tags/axios/"/>
    
    <category term="前端" scheme="https://blog.gadfly.vip/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTTP" scheme="https://blog.gadfly.vip/tags/HTTP/"/>
    
    <category term="java" scheme="https://blog.gadfly.vip/tags/java/"/>
    
    <category term="spring" scheme="https://blog.gadfly.vip/tags/spring/"/>
    
    <category term="后端" scheme="https://blog.gadfly.vip/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Axios 同一实例配置下载文件与JSON处理</title>
    <link href="https://blog.gadfly.vip/2021/02/axios-download-file/"/>
    <id>https://blog.gadfly.vip/2021/02/axios-download-file/</id>
    <published>2021-02-26T09:21:15.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>现在有一个接口提供下载服务，在发生异常时，这个接口会返回 JSON 数据，来告诉前端是什么样的异常。默认情况下，Axios 只能处理 JSON 数据，如何让二者兼容是本文讨论的核心。</p><p>Axios 的核心是 <code>XMLHttpRequest</code>。可以设置 <code>XMLHttpRequest</code> 对象的 <code>responseType</code> 属性以改变从服务器端获取的预期响应。可接受的值为空字符串（默认）、<code>arraybuffer</code>、<code>blob</code>、<code>json</code>、<code>text</code>、<code>document</code>。而 Axios 默认配置为 <code>json</code>，如果将其配置为 <code>blob</code>，虽然可以处理下载文件了，但是接口返回的 JSON 数据很难<strong>同步</strong>转换为 JSON 进行处理（因为 Blob 转 JSON 需要使用 <code>FileReader().readAsText()</code>，这是一个异步的操作）。因此我们可以设置 <code>responseType</code> 为 <code>arraybuffer</code>，<code>ArrayBuffer</code> 对象用来表示通用的、固定长度的原始二进制数据缓冲区。它是一个字节数组，通常在其他语言中称为“byte array”，<code>ArrayBuffer</code>可以简单的转换为 JSON 或 Blob。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ajax 封装插件, 使用 axios</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> Config <span class="token keyword">from</span> <span class="token string">'@/config'</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  baseURL<span class="token operator">:</span> Config<span class="token punctuation">.</span>baseURL <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>apiUrl <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span>  timeout<span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 请求超时时间设置</span>  crossDomain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  withCredentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Check cross-site Access-Control</span>  <span class="token comment">// 定义可获得的http响应状态码</span>  <span class="token comment">// return true、设置为null或者undefined，promise将resolved,否则将rejected</span>  <span class="token function">validateStatus</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">510</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建请求实例</span><span class="token keyword">const</span> _axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">originConfig</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> reqConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>originConfig <span class="token punctuation">&#125;</span>    <span class="token comment">// step1: 容错处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reqConfig<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* eslint-disable-next-line */</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'request need url'</span><span class="token punctuation">)</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        source<span class="token operator">:</span> <span class="token string">'axiosInterceptors'</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'request need url'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reqConfig<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 默认使用 get 请求</span>      reqConfig<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token string">'get'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 大小写容错</span>    reqConfig<span class="token punctuation">.</span>method <span class="token operator">=</span> reqConfig<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 参数容错</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reqConfig<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reqConfig<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 防止字段用错</span>        reqConfig<span class="token punctuation">.</span>params <span class="token operator">=</span> reqConfig<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reqConfig<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'post'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reqConfig<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 防止字段用错</span>        reqConfig<span class="token punctuation">.</span>data <span class="token operator">=</span> reqConfig<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 检测是否包含文件类型, 若包含则进行 formData 封装</span>      <span class="token keyword">let</span> hasFile <span class="token operator">=</span> <span class="token boolean">false</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reqConfig<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> reqConfig<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> item <span class="token operator">=</span> reqConfig<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">FileList</span> <span class="token operator">||</span> item <span class="token keyword">instanceof</span> <span class="token class-name">File</span> <span class="token operator">||</span> item <span class="token keyword">instanceof</span> <span class="token class-name">Blob</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hasFile <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token comment">// 检测到存在文件使用 FormData 提交数据</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reqConfig<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> reqConfig<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        reqConfig<span class="token punctuation">.</span>data <span class="token operator">=</span> formData      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// TODO: 其他类型请求数据格式处理</span>      <span class="token comment">/* eslint-disable-next-line */</span>      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">其他请求类型: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>reqConfig<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, 暂无自动处理</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 你自己的请求头处理，比如Authorization之类的</span>    <span class="token comment">// ...</span>    <span class="token keyword">return</span> reqConfig  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment">// Add a response interceptor</span>_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回的内容是文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'application/octet-stream'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回的数据是 arraybuffer，内容是 json</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>request<span class="token punctuation">.</span>responseType <span class="token operator">===</span> <span class="token string">'arraybuffer'</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object ArrayBuffer]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> text <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>      res<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span>data    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> code<span class="token punctuation">,</span> message <span class="token punctuation">&#125;</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>data <span class="token comment">// eslint-disable-line</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 你自己的异常处理</span>      <span class="token comment">// ...</span>      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        message<span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">$notify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        title<span class="token operator">:</span> <span class="token string">'Network Error'</span><span class="token punctuation">,</span>        dangerouslyUseHTMLString<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'&lt;strong class="my-notify">请检查 API 是否异常&lt;/strong>'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断请求超时</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'ECONNABORTED'</span> <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'请求超时'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment">// eslint-disable-next-line</span>Plugin<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// eslint-disable-next-line</span>  Vue<span class="token punctuation">.</span>axios <span class="token operator">=</span> _axios  window<span class="token punctuation">.</span>axios <span class="token operator">=</span> _axios  Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    axios<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> _axios      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    $axios<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> _axios      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Vue<span class="token punctuation">.</span>axios<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Plugin<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 导出常用函数</span><span class="token comment">/** * @param &#123;string&#125; url * @param &#123;object&#125; data * @param &#123;object&#125; params */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">_axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    data<span class="token punctuation">,</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @param &#123;string&#125; url * @param &#123;object&#125; params */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">_axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 下载用的实例配置 * @param &#123;string&#125; url * @param &#123;object&#125; params */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">_axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    params<span class="token punctuation">,</span>    <span class="token comment">// 指定无超时、接收对象为arraybuffer</span>    timeout<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    responseType<span class="token operator">:</span> <span class="token string">'arraybuffer'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @param &#123;string&#125; url * @param &#123;object&#125; data * @param &#123;object&#125; params */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">_axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">'put'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    params<span class="token punctuation">,</span>    data<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @param &#123;string&#125; url * @param &#123;object&#125; params */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">_delete</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">_axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">'delete'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> _axio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="http://blog.tubumu.com/2017/12/27/axios-extension-01/">Axios 同时支持下载和 JSON 数据格式</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在有一个接口提供下载服务，在发生异常时，这个接口会返回 JSON 数据，来告诉前端是什么样的异常。默认情况下，Axios 只能处理 JSON 数据，如何让二者兼容是本文讨论的核心。&lt;/p&gt;
&lt;p&gt;Axios 的核心是 &lt;code&gt;XMLHttpRequest&lt;/code&gt;</summary>
      
    
    
    
    <category term="开发" scheme="https://blog.gadfly.vip/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="javascript" scheme="https://blog.gadfly.vip/tags/javascript/"/>
    
    <category term="axios" scheme="https://blog.gadfly.vip/tags/axios/"/>
    
    <category term="前端" scheme="https://blog.gadfly.vip/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTTP" scheme="https://blog.gadfly.vip/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>利用 Github Actions 自动部署 Hexo 博客</title>
    <link href="https://blog.gadfly.vip/2021/02/github-actions-hexo-ci/"/>
    <id>https://blog.gadfly.vip/2021/02/github-actions-hexo-ci/</id>
    <published>2021-02-23T11:39:07.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Github Actions 可以很方便实现 CI&#x2F;CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。当我们运行<code>Jobs</code>时，它会创建一个容器 (runner)，容器支持：<code>Ubuntu</code>、<code>Windows</code>和<code>MacOS</code>等系统，在容器中我们可以安装软件，利用安装的软件帮我们处理一些数据，然后把处理好的数据推送到某个地方。</p><p>本文将介绍利用 Github Actions 实现自动部署<code>hexo</code>到 Github Pages，在之前我们需要写完文章执行<code>hexo d -g</code>来部署，当你文章比较多的时候，可能还需要等待很久，而且还可能会遇到本地安装的<code>Node.js</code>版本与<code>Hexo</code>不兼容的问题，目前我就是因为电脑的<code>Node.js</code>版本升到<code>v14</code>版本导致与<code>Hexo</code>不兼容部署不了，才来捣腾 Github Actions 功能的。利用 Github Actions 你将会没有这些烦恼。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><h3 id="生成部署密钥"><a href="#生成部署密钥" class="headerlink" title="生成部署密钥"></a>生成部署密钥</h3><p>一路按回车直到生成成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -f github-deploy-key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当前目录下会有<code>github-deploy-key</code>和<code>github-deploy-key.pub</code>两个文件。</p><h3 id="配置部署密钥"><a href="#配置部署密钥" class="headerlink" title="配置部署密钥"></a>配置部署密钥</h3><p>复制<code>github-deploy-key</code>文件内容，在博客源码仓库的 <code>Settings</code> -&gt; <code>Secrets</code> -&gt; <code>Add a new secret</code> 页面上添加。</p><p>在<code>Name</code>输入框填写<code>HEXO_DEPLOY_PRI</code>。<br>在<code>Value</code>输入框填写<code>github-deploy-key</code>文件内容。</p><p>复制<code>github-deploy-key.pub</code>文件内容，在<code>your.github.io</code>仓库 <code>Settings</code> -&gt; <code>Deploy keys</code> -&gt; <code>Add deploy key</code> 页面上添加。</p><p>在<code>Title</code>输入框填写<code>HEXO_DEPLOY_PUB</code>。<br>在<code>Key</code>输入框填写<code>github-deploy-key.pub</code>文件内容。<br>勾选<code>Allow write access</code>选项。</p><h2 id="编写-Github-Actions"><a href="#编写-Github-Actions" class="headerlink" title="编写 Github Actions"></a>编写 Github Actions</h2><h3 id="Workflow-模版"><a href="#Workflow-模版" class="headerlink" title="Workflow 模版"></a>Workflow 模版</h3><p>在博客源码仓库下创建<code>.github/workflows/deploy.yml</code>文件，我这里是博客仓库的<code>source</code>分支，目录结构如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blog <span class="token punctuation">(</span>repository<span class="token punctuation">)</span>└── .github    └── workflows        └── deploy.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>deploy.yml</code> 文件中粘贴以下内容。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> source<span class="token key atrule">env</span><span class="token punctuation">:</span>  <span class="token key atrule">GIT_USER</span><span class="token punctuation">:</span> Gadfly  <span class="token key atrule">GIT_EMAIL</span><span class="token punctuation">:</span> gadfly@gadfly.vip  <span class="token key atrule">DEPLOY_REPO</span><span class="token punctuation">:</span> gadfly3173/gadfly3173.github.io  <span class="token key atrule">DEPLOY_BRANCH</span><span class="token punctuation">:</span> master  <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Build on node $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node_version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> and $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">os</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ubuntu<span class="token punctuation">-</span>latest<span class="token punctuation">]</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.x<span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout deploy repo        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">repository</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.DEPLOY_REPO <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">ref</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.DEPLOY_BRANCH <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> .deploy_git      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node<span class="token punctuation">-</span>version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node<span class="token punctuation">-</span>version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Configuration environment        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">HEXO_DEPLOY_PRI</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>secrets.HEXO_DEPLOY_PRI<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          mkdir -p ~/.ssh/          echo "$HEXO_DEPLOY_PRI" > ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com >> ~/.ssh/known_hosts          git config --global user.name $GIT_USER          git config --global user.email $GIT_EMAIL</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          yarn</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy hexo        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          yarn release</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Github Actions 可以很方便实现 CI&amp;#x2F;CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化</summary>
      
    
    
    
    <category term="建站" scheme="https://blog.gadfly.vip/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="纪实" scheme="https://blog.gadfly.vip/tags/%E7%BA%AA%E5%AE%9E/"/>
    
    <category term="建站" scheme="https://blog.gadfly.vip/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Hexo" scheme="https://blog.gadfly.vip/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于HTTP Header的碎碎念</title>
    <link href="https://blog.gadfly.vip/2021/02/sth-about-http-header/"/>
    <id>https://blog.gadfly.vip/2021/02/sth-about-http-header/</id>
    <published>2021-02-20T19:15:35.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>关于HTTP Header，网上找到的大部分教程，设置header都是非常简单粗暴的new一个<code>HttpHeaders()</code>，然后直接add的形式（甚至连StackOverflow上也有很多回答是这么做的），如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileSystemResource</span><span class="token punctuation">></span></span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache, no-store, must-revalidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Last-Modified"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ETag"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span>            <span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样代码里会有很多魔法值，而对于<code>Content-Disposition</code>这样的header中，filename如果直接把中文填进去还会导致乱码，对它进行转码就又要多写几行。其实Spring本身对于header就提供了很多简单的设置方法，可以有效提高代码的可读性。</p><p>将上面的代码用Spring中提供了方法改写的话，可以写成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileSystemResource</span><span class="token punctuation">></span></span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span><span class="token class-name">CacheControl</span><span class="token punctuation">.</span><span class="token function">noStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mustRevalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setContentDisposition</span><span class="token punctuation">(</span><span class="token class-name">ContentDisposition</span><span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setPragma</span><span class="token punctuation">(</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setExpires</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setLastModified</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setETag</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span>            <span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_OCTET_STREAM<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样编码的转换也不需要自己写了，也可以很简单设置header，不会有打错字的困扰（雾</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于HTTP Header，网上找到的大部分教程，设置header都是非常简单粗暴的new一个&lt;code&gt;HttpHeaders()&lt;/code&gt;，然后直接add的形式（甚至连StackOverflow上也有很多回答是这么做的），如：&lt;/p&gt;
&lt;pre class=&quot;lin</summary>
      
    
    
    
    <category term="开发" scheme="https://blog.gadfly.vip/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="HTTP" scheme="https://blog.gadfly.vip/tags/HTTP/"/>
    
    <category term="java" scheme="https://blog.gadfly.vip/tags/java/"/>
    
    <category term="spring" scheme="https://blog.gadfly.vip/tags/spring/"/>
    
    <category term="后端" scheme="https://blog.gadfly.vip/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 开发笔记 - @Transactional 注解使用浅析</title>
    <link href="https://blog.gadfly.vip/2020/04/spring-boot-transactional/"/>
    <id>https://blog.gadfly.vip/2020/04/spring-boot-transactional/</id>
    <published>2020-04-12T07:08:19.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 中对方法开启事务管理非常轻松，只需要 <code>@Transactional</code> 注解就可以让方法开启事务，然而不了解其机制时使用可能会导致其失效。</p><span id="more"></span><p><code>@Transactional</code> 本质是一个 AOP 动态代理，不需要开发者干预。下面来一个代码例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span> <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span><span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>isolation<span class="token operator">=</span><span class="token class-name">Isolation</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert01</span><span class="token punctuation">(</span><span class="token class-name">User</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"测试插入事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert02</span><span class="token punctuation">(</span><span class="token class-name">User</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insert01</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"测试插入事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，调用 <code>insert01</code> 时，事务的执行不会有任何问题，但是调用 <code>insert02</code> 时，异常被正常抛出，但是数据依然被插入了数据库，说明事务没有被正常执行。<br>在外部调用 <code>insert01</code> 时，调用的就是被动态代理的 <code>insert01</code>，但是如果在一个类里自调用时，这样是无法调用到代理对象的，所以 <code>insert02</code> 中调用的不是代理对象 <code>insert01</code>，而是原本的方法。当然，原本的对象中是没有切片做事务增强的，自然也不能进行事务回滚。</p><p>一般的事务代理机制：<br><img src="/images/227387.gif" data-original="/images/posts/2020/04/20170608105830399.jpg"></p><p>自调用时，通过 <code>this</code> 只能取到原本的方法：<br><img src="/images/227387.gif" data-original="/images/posts/2020/04/20170608110005451.jpg"></p><p>那么如何解决自调用失效的问题呢？</p><ul><li><p>最佳实践自然是不要产生自调用。</p></li><li><p>如果无法避免的话，那么可以只在 <code>insert02</code> 上注解事务。（如果两个方法都要被外部调用，那就两个都写上）</p></li><li><p><code>insert01</code> 开启事务，并且在 <code>insert02</code> 中不使用 <code>this</code> 调用，而是获取代理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert02</span><span class="token punctuation">(</span><span class="token class-name">User</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert01</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token class-name">UserService</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 采取这种方式的话</span>    <span class="token comment">// @EnableAspectJAutoProxy(exposeProxy=true,proxyTargetClass=true)</span>    <span class="token comment">// 必须设置为true</span>    <span class="token keyword">return</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span><span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从 <code>beanFactory</code> 中获取对象。Controller 中的 <code>UserService</code> 是代理对象，它是从 <code>beanFactory</code> 中得来的，那么 Service 类内调用其他方法时，也先从 <code>beanFacotry</code> 中拿出来就OK了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert02</span><span class="token punctuation">(</span><span class="token class-name">User</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert01</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">UserService</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">SpringContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>有关 AOP 和代理的问题可以看 <a href="https://juejin.im/post/5b90e648f265da0aea695672">从代理机制到Spring AOP</a> 和 <a href="https://juejin.im/post/5b06bf2df265da0de2574ee1">Spring AOP就是这么简单啦</a>。这两篇文章讲得很清楚了。</p><p>除了代理导致的自调用失效，还有一个问题是方法抛出异常时，事务也没有回滚。这个则是因为 <code>@Transactional</code> 中捕获的异常只有 <code>RuntimeException</code>。<br>DefaultTransactionAttribute.java 源码中写的是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span> <span class="token operator">||</span> ex <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以需要捕获其他异常时，必须把注解写成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span> rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更详细的使用要点可以看来自 IBM Developer 的 <a href="https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html">透彻的掌握 Spring 中@transactional 的使用</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring Boot 中对方法开启事务管理非常轻松，只需要 &lt;code&gt;@Transactional&lt;/code&gt; 注解就可以让方法开启事务，然而不了解其机制时使用可能会导致其失效。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="https://blog.gadfly.vip/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="java" scheme="https://blog.gadfly.vip/tags/java/"/>
    
    <category term="spring" scheme="https://blog.gadfly.vip/tags/spring/"/>
    
    <category term="后端" scheme="https://blog.gadfly.vip/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 开发笔记 - JSON Web Token 与登录鉴权设计</title>
    <link href="https://blog.gadfly.vip/2020/04/spring-boot-jwt-login/"/>
    <id>https://blog.gadfly.vip/2020/04/spring-boot-jwt-login/</id>
    <published>2020-04-09T04:49:04.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 开发笔记系列第二弹，这次来聊聊 JWT 和登录鉴权系统的设计。</p><span id="more"></span><p>阮一峰的 <a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程</a> 里把 JWT 的概念都讲得很清楚了。既然它被称为 Token，那么自然是作为令牌，用来验证身份的存在。传统的 Session, Cookie 等都承担着类似的功能。JWT 的独特之处在于它可以承载一定的信息，是一种无状态的令牌。验证其是否有效的工作可以不需要经过数据库或者缓存等，如果加密 JWT 的密钥在后端是固定的或者通过其承载的信息可以算出来的，那么验证与下发都可以极大的减少服务器压力。而它本身可以承载的信息中可以加上不敏感的内容，比如用户 id 或者用户名等等，在不经过数据库操作的时候就能判断用户的合法性，完成一定的操作。<br>当然这样的设计也有局限性，比如我的项目中需要保证用户不会在多处同时登录，但是 JWT 验证 Token 只根据它其中包含的过期时间信息，后端不能在用户使用第二台设备登录时作废第一台设备的登录信息，这可能导致一定的安全隐患。因此我在项目中引入了 Redis 缓存，每次下发 Token 时生成随机密钥，这个密钥与用户信息绑定，与 Token 拥有相同的过期时间并存在 Redis 中。Redis 的原理使得这样的操作不会增加太多的开销，又能让 JWT 依然承担传递信息的任务。</p><h3 id="JWT-相关的设计"><a href="#JWT-相关的设计" class="headerlink" title="JWT 相关的设计"></a>JWT 相关的设计</h3><p>首先来一个 JWT 的工具类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisUtils</span> nonStaticRedisUtils<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RedisUtils</span> redisUtils<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">JWTUtil</span><span class="token punctuation">(</span><span class="token class-name">RedisUtils</span> nonStaticRedisUtils<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nonStaticRedisUtils <span class="token operator">=</span> nonStaticRedisUtils<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisUtils <span class="token operator">=</span> nonStaticRedisUtils<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 过期时间7天</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 生成签名,7days后过期     *     * @param openid qq_openid     * @return 加密的token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">String</span> openid<span class="token punctuation">,</span> <span class="token class-name">String</span> access_level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisUtils<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>openid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            redisUtils<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>openid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> secret <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Algorithm</span> algorithm <span class="token operator">=</span> <span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>openid<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>openid <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 附带openid信息</span>        <span class="token keyword">return</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">,</span> openid<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"access_level"</span><span class="token punctuation">,</span> access_level<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 校验token是否正确     *     * @param token  密钥     * @return 是否正确     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">String</span> openid<span class="token punctuation">,</span> <span class="token class-name">String</span> access_level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> secret <span class="token operator">=</span> redisUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>openid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Algorithm</span> algorithm <span class="token operator">=</span> <span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JWTVerifier</span> verifier <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">,</span> openid<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"access_level"</span><span class="token punctuation">,</span> access_level<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DecodedJWT</span> jwt <span class="token operator">=</span> verifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTVerificationException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获得token中的信息无需secret解密也能获得     *     * @return token中包含的openid     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getOpenid</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DecodedJWT</span> jwt <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAccessLevel</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DecodedJWT</span> jwt <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"access_level"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我使用的是 <code>com.auth0.java-jwt</code>，换成 <code>io.jsonwebtoken.jjwt</code> 也不会有太大的区别，都是对 JWT 标准的实现，只是接口上不太相同。我在 JWT 的载荷中存放了用户的 open id 和权限级别，这样在不查询数据库的情况下就可以判断用户是否有权操作部分敏感接口。签名部分的加密方式选择了默认的 SHA-256，换成其他的也可以。至于上面那一串非静态方法注入，则是因为我在 Redis 的工具类中做成了非静态方法，这个 JWT 工具类又做成了静态方法，而把这个静态方法都换成非静态方法又遇到了一堆问题，于是我就直接把非静态方法注入这个类，再去用静态对象调用这个非静态方法。。。<br>下面贴一下 Redis 的工具类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedisUtils</span> redisUtils<span class="token punctuation">;</span>    <span class="token comment">/**     * 实现命令：DEL key，删除一个key     *     * @param key     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 实现命令：HAS key，返回bool     *     * @param key     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 实现命令：SET key value EX seconds，设置key-value和超时时间（秒）     *     * @param key     * @param value     * @param timeout     *            （以ms为单位）     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 实现命令：GET key，返回 key所关联的字符串值。     *     * @param key     * @return value     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本身写的时候还有很多其他方法，这里就只展示用到的了。总的来说比较简单，Redis 也是属于 non-SQL 数据库，只有键值对，操作很方便。需要注意的是 <code>redisTemplate</code> 设置过期时间时，默认是以秒为单位，有需要的话就在后面加上 <code>TimeUnit</code>。</p><h3 id="鉴权系统的设计"><a href="#鉴权系统的设计" class="headerlink" title="鉴权系统的设计"></a>鉴权系统的设计</h3><p>显然鉴权处理不应该在每个 Controller 里分别判断，而应该作为一个全局方法，在请求到达 Controller 之前就处理完成。Spring Boot 自带 <code>HandlerInterceptor</code> 接口，因此我们只需要将其实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">||</span> token <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">JWTUtil</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token class-name">JWTUtil</span><span class="token punctuation">.</span><span class="token function">getOpenid</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JWTUtil</span><span class="token punctuation">.</span><span class="token function">getAccessLevel</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>            <span class="token function">returnJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token class-name">GlobalJSONResult</span><span class="token punctuation">.</span><span class="token function">errorTokenMsg</span><span class="token punctuation">(</span><span class="token string">"登录信息无效，请重新登录！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">returnJson</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> json<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strJson <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>strJson<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于我按照 Restful API 的思路来构建的后端，因此登录处理失败时的返回也应该为 JSON。然而正常情况下在这里只能返回文字流。于是我在这里做了一个 <code>returnJson</code> 的方法，将我需要返回的 JSON 转为 String，再在返回的 Header 上加上 ContentType，使得客户端浏览器将其转为 JSON。鉴权则很简单，客户端发起请求时把 Token 放在请求头里，这里从 <code>HttpServletRequest</code> 中获得请求头中的字段进行认证即可。<br>现在完成了登录的鉴权处理，但是后端接收的请求并不会自己跑过来，需要配置一个全局拦截器。Spring Boot 有着 <code>WebMvcConfigurer</code> 的接口，将其实现即可完成我们的想法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomWebConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把它注册为一个配置类，在其中注册刚才的登录拦截器，添加 <code>/**</code> 路径，把所有请求都转到拦截器中，当然，登录之类的接口不能走拦截器，因此还要添加例外。</p><p>这样，一个基本的未登录用户的拦截功能就做完了。由于我的项目中权限只有两级，敏感权限也没几个，所以只是另外写了个工具类判断是否有高级权限，并没有做进拦截器里。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring Boot 开发笔记系列第二弹，这次来聊聊 JWT 和登录鉴权系统的设计。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="https://blog.gadfly.vip/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="java" scheme="https://blog.gadfly.vip/tags/java/"/>
    
    <category term="spring" scheme="https://blog.gadfly.vip/tags/spring/"/>
    
    <category term="后端" scheme="https://blog.gadfly.vip/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 开发笔记 - 使用 Spring Boot 完成 Server-Side 模式的 QQ 第三方登录</title>
    <link href="https://blog.gadfly.vip/2020/04/springboot-auth2-with-QQ/"/>
    <id>https://blog.gadfly.vip/2020/04/springboot-auth2-with-QQ/</id>
    <published>2020-04-08T09:29:38.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>写这个主要是为了整理开发思路与记录，顺便表示 QQ 的接口真的写的很奇怪。。。</p><span id="more"></span><p>整个项目是一个课程作业，我选择了后端使用 Spring Boot，前端使用 Vue.js 作为项目的技术栈。首先说一下 Auth 2.0。这个在QQ的文档里倒也写的很清楚 <a href="https://wiki.connect.qq.com/oauth2-0%E7%AE%80%E4%BB%8B">OAuth2.0简介 — QQ互联WIKI</a>。它采用第三方应用在客户端根据自己的 AppId 和 Redirect URI（回调地址）来请求QQ的授权页面，用户授权后将 Authentication Code 作为 params 跳转到回调地址，回调地址将这个 Code 传给后端，由后端根据 AppId 和 Secret 再向 QQ 申请用户登录的 Access Token，根据这个 Token 后端才能去获取用户授权的相关信息。第三方应用中每个用户都有一个唯一的 OpenId 用于对应唯一的用户，但是不同第三方应用对相同的用户拿到的 OpenId 则是不同的。开发中参考了 <a href="https://segmentfault.com/a/1190000020181967">使用java后端的springboot环境下实现网站接入QQ第三方登录</a>，因此避免了很多坑。</p><h3 id="获取-Access-Token"><a href="#获取-Access-Token" class="headerlink" title="获取 Access Token"></a>获取 Access Token</h3><p>QQ 官方文档在这里 <a href="https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0">传送门</a>。这份文档对于没有开发经验的人来说坑实在是太多，不过相比其他平台还是比较友好的。参考文章中是使用了读取配置的方式，我则是写了一个返回secret等内容的工具类来获取 QQ 相关配置。<br>基本代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login/callback"</span><span class="token punctuation">,</span> consumes<span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">GlobalJSONResult</span> <span class="token function">handleCallbackCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LoginCode</span> reqParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> authorization_code <span class="token operator">=</span> reqParams<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>authorization_code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">GlobalJSONResult</span><span class="token punctuation">.</span><span class="token function">errorMsg</span><span class="token punctuation">(</span><span class="token string">"code无效，请重新授权！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//client端的状态值。用于第三方应用防止CSRF攻击。</span>    <span class="token class-name">String</span> state <span class="token operator">=</span> reqParams<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">GlobalJSONResult</span><span class="token punctuation">.</span><span class="token function">errorMsg</span><span class="token punctuation">(</span><span class="token string">"state无效，请确认是否为本人操作！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> access_token <span class="token operator">=</span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span>authorization_code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">GlobalJSONResult</span><span class="token punctuation">.</span><span class="token function">errorMsg</span><span class="token punctuation">(</span><span class="token string">"access_token获取失败，请重新授权！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 下略</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> authorization_code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> urlForAccessToken <span class="token operator">=</span> <span class="token function">getUrlForAccessToken</span><span class="token punctuation">(</span>authorization_code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> firstCallbackInfo <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>urlForAccessToken<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> firstCallbackInfo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> access_token <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> param <span class="token operator">:</span> params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyvalue <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyvalue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            access_token <span class="token operator">=</span> keyvalue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> access_token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUrlForAccessToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> authorization_code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> grant_type <span class="token operator">=</span> <span class="token string">"authorization_code"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> client_id <span class="token operator">=</span> <span class="token class-name">QQLoginUtil</span><span class="token punctuation">.</span><span class="token function">getQQLoginClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> client_secret <span class="token operator">=</span> <span class="token class-name">QQLoginUtil</span><span class="token punctuation">.</span><span class="token function">getQQLoginClientSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> redirect_uri <span class="token operator">=</span> <span class="token class-name">QQLoginUtil</span><span class="token punctuation">.</span><span class="token function">getQQLoginRedirectUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"https://graph.qq.com/oauth2.0/token"</span> <span class="token operator">+</span>                    <span class="token string">"?grant_type=%s&amp;client_id=%s&amp;client_secret=%s&amp;code=%s&amp;redirect_uri=%s"</span><span class="token punctuation">,</span>            grant_type<span class="token punctuation">,</span> client_id<span class="token punctuation">,</span> client_secret<span class="token punctuation">,</span> authorization_code<span class="token punctuation">,</span> redirect_uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>GlobalJSONResult</code> 是我编写的全局 JSON 返回类，有空会在其他文章中说明。QQ 在文档中要求生成 CSRF Token 一类的东西作为 state 参数上传，以避免 CSRF 攻击，不过由于我的登录系统是只有授权 QQ 登录之后才会生成账户，因此基本没有这方面的风险，就把 state 写死了。接收的 <code>reqParams</code> 则是直接前端将路由中的参数返回，Vue.js 中使用 <code>this.$route.query</code> 就可以将参数以 JSON 形式获取。</p><h4 id="解析接口返回的数据"><a href="#解析接口返回的数据" class="headerlink" title="解析接口返回的数据"></a>解析接口返回的数据</h4><blockquote><p>之后就是跳转这个URL去获取 access_token，这里就是第一个坑了，按照官方文档，搞得好像这次我们跳转到这个获取 access_token 的URL后，腾讯那边会跳转我们设定的回调地址并带上我们需要的参数，就像之前获取 authorization code 一样。但完全不是这样的！！！你按照要求向这个获取 access_token 的URL发送请求后，对方并不会再跳转，而是直接返回你一个数据，希望你获得这个数据然后处理。这有点像前端JS的异步请求后后回调函数处理data。</p></blockquote><p>所以这里使用了 <code>restTemplate</code> 来发起请求。虽然很多教程里都会说使用 <code>@Autowired</code> 来注入实例，但是你会发现 IDEA 中会提示这种写法不被推荐，使用构造函数注入是更好的选择。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注入实例</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserInfoRepository</span> userInfoRepository<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">LoginController</span><span class="token punctuation">(</span><span class="token class-name">UserInfoRepository</span> userInfoRepository<span class="token punctuation">,</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userInfoRepository <span class="token operator">=</span> userInfoRepository<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>restTemplate可以接收所有的返回参数，然而 QQ 这里采用了一个非常神奇的接口返回形式：<code>access_token=FE04**CCE2&amp;expires_in=7776000&amp;refresh_token=88E4**BE14</code>。请<strong>不要</strong>认为这是在回调地址后面加上的参数，这个就是 token 接口返回的一个<strong>字符串</strong>。这接口真是绝了，写的人不觉得别扭吗？？？拿到这个字符串之后只能根据 &amp; 和 &#x3D; 拆分来获取数据了。</p><p>我这边使用前端将参数上传而不是直接把回调地址设为后端地址的原因主要是考虑到拿到 Code 之后，后端处理需要一定的时间，如果不能在前端展示动画之类的内容，容易让用户不明所以，因此前端拿到参数再提交给后端，同时前端展示等待动画是更好的选择。</p><h3 id="获取-Open-Id"><a href="#获取-Open-Id" class="headerlink" title="获取 Open Id"></a>获取 Open Id</h3><p>拿到这个 token 之后就可以去获取用户的 openid 了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 上略</span>  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"https://graph.qq.com/oauth2.0/me?access_token=%s"</span><span class="token punctuation">,</span> access_token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//第二次模拟客户端发出请求后得到的是带openid的返回数据,格式如下</span>  <span class="token comment">//callback( &#123;"client_id":"YOUR_APPID","openid":"YOUR_OPENID"&#125; );</span>  <span class="token class-name">String</span> secondCallbackInfo <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//正则表达式处理</span>  <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"\\&#123;.*\\&#125;"</span><span class="token punctuation">;</span>  <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>secondCallbackInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"异常的回调值: "</span> <span class="token operator">+</span> secondCallbackInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">GlobalJSONResult</span><span class="token punctuation">.</span><span class="token function">errorMsg</span><span class="token punctuation">(</span><span class="token string">"异常的回调值: "</span> <span class="token operator">+</span> secondCallbackInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//调用jackson</span>  <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> openid <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 QQ 又返回了什么呢，返回了一个 JSONP 。。。形如：<code>callback( &#123;&quot;client_id&quot;:&quot;YOUR_APPID&quot;,&quot;openid&quot;:&quot;YOUR_OPENID&quot;&#125; )</code>不是，腾讯你们这玩意是分了几个人写啊，怎么每个接口返回格式都这么奇怪啊喂！！！处理这个则是使用正则，先把 <code>callback</code> 里的对象取出来，用 Spring Boot 自带的 Jackson 解析为 Map。</p><blockquote><p>这里有两点值得一说</p><p>其一，为什么String regex &#x3D; “&amp;#92;&amp;#92;{.*&amp;#92;&amp;#92;}”;，正则表达式中有&amp;#92;&amp;#92;这东西呢？这时因为正则表达式中{和}都是有意义的，非字符的，我们希望正则表达式把它们理解成字符，就需要对它们进行转义，所以这里需要一个转义符&amp;#92;，但&amp;#92;自身在java字符串中并不是字符，所以我们还要转义&amp;#92;自身，所以会出现&amp;#92;&amp;#92;。</p><p>其二，matcher如果不经历matcher.find()，则就算有合适的匹配内容，也仍然不会有任何匹配能得到。所以matcher.find()是必须的，同时matcher.find()一次后再来一次，那完了，返回false。</p></blockquote><h3 id="获取用户信息与登录-Token-下发"><a href="#获取用户信息与登录-Token-下发" class="headerlink" title="获取用户信息与登录 Token 下发"></a>获取用户信息与登录 Token 下发</h3><p>教程到这里结束了，而我还需要完成获取用户信息等操作才能完成整个登录接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">// 上略</span>    <span class="token comment">// 获取QQ用户信息</span>    <span class="token class-name">String</span> user_info_url <span class="token operator">=</span> <span class="token function">getUserInfoUrl</span><span class="token punctuation">(</span>access_token<span class="token punctuation">,</span> openid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> user_result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>user_info_url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> user_info_qq <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>user_result<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> user_info_qq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ret"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">GlobalJSONResult</span><span class="token punctuation">.</span><span class="token function">errorMsg</span><span class="token punctuation">(</span><span class="token string">"用户信息获取失败，请重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span>openid<span class="token punctuation">,</span> user_info_qq<span class="token punctuation">)</span><span class="token punctuation">;</span>    user_info_qq<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">GlobalJSONResult</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>user_info_qq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 下略</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserInfoUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> access_token<span class="token punctuation">,</span> <span class="token class-name">String</span> openid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> client_id <span class="token operator">=</span> <span class="token class-name">QQLoginUtil</span><span class="token punctuation">.</span><span class="token function">getQQLoginClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"https://graph.qq.com/user/get_user_info"</span> <span class="token operator">+</span>            <span class="token string">"?access_token=%s&amp;oauth_consumer_key=%s&amp;openid=%s"</span><span class="token punctuation">,</span> access_token<span class="token punctuation">,</span> client_id<span class="token punctuation">,</span> openid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> openid<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> user_info_qq<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> uid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">nameUUIDFromBytes</span><span class="token punctuation">(</span>openid<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> access_level<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfoRepository<span class="token punctuation">.</span><span class="token function">existsById</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> userInfoRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span>user_info_qq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setAvatarUrl</span><span class="token punctuation">(</span>user_info_qq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"figureurl_2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfoRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        access_level <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">getAccessLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> openid<span class="token punctuation">,</span> user_info_qq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user_info_qq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"figureurl_2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfoRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        access_level <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">getAccessLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">JWTUtil</span><span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>openid<span class="token punctuation">,</span> access_level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取用户信息的接口正常多了，返回的是 JSON。主要可以聊聊的是 JWT，不过这个也放到下次再讲吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;写这个主要是为了整理开发思路与记录，顺便表示 QQ 的接口真的写的很奇怪。。。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="https://blog.gadfly.vip/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="java" scheme="https://blog.gadfly.vip/tags/java/"/>
    
    <category term="spring" scheme="https://blog.gadfly.vip/tags/spring/"/>
    
    <category term="后端" scheme="https://blog.gadfly.vip/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于NFC和IC智能卡的一二三</title>
    <link href="https://blog.gadfly.vip/2019/09/about-ic-cards/"/>
    <id>https://blog.gadfly.vip/2019/09/about-ic-cards/</id>
    <published>2019-09-29T14:37:35.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p><small><em>本文中提到的<code>卡片</code>，若非特别注明，均为非接触式卡片，不再另外声明。</em></small></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先分析NFC和我们身边的IC卡之前，我们需要先介绍一些基本的概念：</p><blockquote><p>近场通信技术（Near-field communication，NFC）由非接触式射频识别（RFID）演变而来，由飞利浦半导体（现恩智浦半导体）、诺基亚和索尼共同于2004年研制开发，其基础是RFID及互连技术。近场通信是一种短距高频的无线电技术，在13.56MHz频率运行于20厘米距离内。其传输速度有106 Kbit&#x2F;秒、212 Kbit&#x2F;秒或者424 Kbit&#x2F;秒三种。当前近场通信已通过成为ISO&#x2F;IEC IS 18092国际标准、EMCA-340标准与ETSI TS 102 190标准。NFC采用主动和被动两种读取模式。</p><p>每一个完整的NFC设备可以用三种模式工作：</p><ul><li>卡模拟模式（Card emulation mode）：这个模式其实就是相当于一张采用RFID技术的IC卡。可以替代现在大量的IC卡（包括信用卡）场合商场刷卡、IPASS、门禁管制、车票、门票等等。此种方式下，有一个极大的优点，那就是卡片通过非接触读卡器的RF域来供电，即便是寄主设备（如手机）没电也可以工作。NFC设备若要进行卡片模拟（Card Emulation）相关应用，则必须内置安全组件（Security Element, SE）之NFC芯片或通过软件实现主机卡模拟(Host Card Emulation，HCE)。</li><li>读卡器模式（Reader&#x2F;Writer mode）：作为非接触读卡器使用，比如从海报或者展览信息电子标签上读取相关信息。</li><li>点对点模式（P2P mode）：这个模式和红外线差不多，可用于数据交换，只是传输距离较短，传输创建速度较快，传输速度也快些，功耗低（蓝牙也类似）。将两个具备NFC功能的设备链接，能实现数据点对点传输，如下载音乐、交换图片或者同步设备地址薄。因此通过NFC，多个设备如数字相机、PDA、计算机和手机之间都可以交换资料或者服务。</li></ul><p><small><em>摘自：<a href="https://zh.wikipedia.org/wiki/%E8%BF%91%E5%A0%B4%E9%80%9A%E8%A8%8A">zh.wikipedia.org&#x2F;wiki&#x2F;近場通訊</a></em></small></p></blockquote><p>这么大一段话概括一下的话，大致意思是：NFC是一种使得数据可以在几厘米的范围内进行传输的技术，我们身边常见的大陆二代身份证、电子护照、公交卡等都属于这种技术的具体应用。<br>NFC在我们身边的具体应用场景有很多，有时我们会将其错误地认为是其他技术的实现。比如大家常说银行卡、公交卡等“消磁了”，但事实上现在这些卡片已经不再是使用磁条等传统的磁性物质记录数据，而是支持非接触式射频识别（RFID）的电子芯片。他们出现失效的情况一般也不是因为某些磁性物质损坏了，而是其中的线圈或者芯片遭受了物理损伤，比如卡片被弯折等，或者是其他使用类似技术的读写卡器等破坏了其中存储的数据导致无法正常读取。</p><p>传统的RFID技术我这里就不多做解释，将其理解为某种特殊的无线电通信技术即可。NFC只是限于13.56MHz的频段，而RFID的频段有低频（125KHz到135KHz），高频（13.56MHz）和超高频（860MHz到960MHz）之间。NFC工作有效距离小于10cm，所以具有很高的安全性，RFID工作有效距离从几米到几十米都有。RFID标准较多，统一较为复杂（估计是没可能统一的了），只能在特殊行业有特殊需求下，采用相应的技术标准。<br>传统RFID最常见的应用是图书馆的书籍，不是特别寒酸的图书馆的藏书上都会贴有特殊的标签，这种标签可以在一个比较大的范围内被读取，这样就可以实现简便的自助化的图书借阅管理，读者将书放在特定的区域就可以被读取到借阅了哪些书，而不像以前的图书馆需要管理员将扉页上的藏书条形码进行人工扫描，大大提升了效率。许多物流运输也通过类似的方法来管理运输箱，通过机器就可以远程分拣，也方便管理。NFC就是在这样的技术上发展而来，更适合一般日常生活的使用。</p><h2 id="生活中的各种可以刷的卡都是NFC么"><a href="#生活中的各种可以刷的卡都是NFC么" class="headerlink" title="生活中的各种可以刷的卡都是NFC么"></a>生活中的各种可以刷的卡都是NFC么</h2><p>答案显然是否定的。要看一张卡是不是支持NFC技术的卡有以下几种方法：</p><ol><li>用一张支持NFC的安卓手机刷一下<br>虽然手机厂商在宣传NFC时有很多会说什么“全功能NFC”之类的，但是那只是针对之前wikipedia上提到的“卡模拟模式”说的，在读取NFC卡片这件事情上，除了iPhone以外，大家都没有特别大的区别。这边推荐一个名为“MIFARE 经典工具”的app，在GitHub和Google Play上都可以下载：</li></ol><ul><li>Play： <a href="https://play.google.com/store/apps/details?id=de.syss.MifareClassicTool">de.syss.MifareClassicTool</a></li><li>GitHub： <a href="https://github.com/ikarus23/MifareClassicTool">ikarus23&#x2F;MifareClassicTool</a></li><li>F-Droid：<a href="https://f-droid.org/packages/de.syss.MifareClassicTool/">de.syss.MifareClassicTool</a></li><li><em>可用的国内镜像我之后再补充</em><br>使用这个app可以读取到NFC卡片中的部分信息，不过这个app并非支持所有的NFC卡片，只支持MIFARE系列及相似技术的模拟卡（这个问题稍后再说）。首先这个app能识别的肯定是NFC卡片，如果app没有反应，但是手机中的其他应用，比如QQ、微信、金融类app等对其有反应，那么这张卡片也是NFC卡片的一种。</li></ul><ol start="2"><li>如果卡片本身不是特别厚，并且是一般的长方形卡片，则可以用手电筒等能在较小的范围内聚集大量光源的设备照亮这张卡。如果发现里面的小芯片在卡片的某一边，外面有一圈贴近卡片边缘的线圈，形如下图，那么这一般也是NFC技术的卡片。<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/ic_coil.png"></li><li>如果卡片上没有10+8位的数字，也没有8-10位的数字，并且没有标注HID之类的字样，那么这张卡一般也是一种NFC卡片。</li></ol><p>那么如果我们平时使用的非接触式卡片不是NFC的卡片的话，那么又是什么卡片呢？最常见的就是ID卡了。</p><blockquote><p>ID卡全称为身份识别卡（Identification Card），是一种不可写入的感应卡，含固定的编号。ID卡与磁卡一样，都仅仅使用了“卡的号码”而已，卡内除了卡号外，无任何加密存储功能，其“卡号”是公开、裸露的。ISO标准ID卡的规格为：85.5x54x0.80±0.04mm（高&#x2F;宽&#x2F;厚），市场上也存在一些厚、薄卡或异型卡。</p></blockquote><p>最常见的异型卡就是下图右边这种，统称为钥匙扣：<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/id_card.png"><br><img src="/images/227387.gif" data-original="/images/posts/2019/09/id_coil.png"><br>而NFC卡片则一般统称为IC卡：</p><blockquote><p>智能卡（英语：Smart card或IC Card），又称智慧卡、聪明卡、集成电路卡及IC卡。是指粘贴或嵌有集成电路芯片的一种便携式卡片塑胶。卡片包含了微处理器、I&#x2F;O接口及存储器，提供了数据的运算、访问控制及存储功能，卡片的大小、接点定义当前是由ISO规范统一，主要规范在ISO7810中。常见的有电话IC卡、身份IC卡，以及一些交通票证和存储卡。</p><p><small><em>摘自：<a href="https://zh.wikipedia.org/wiki/%E6%99%BA%E6%85%A7%E5%8D%A1">zh.wikipedia.org&#x2F;wiki&#x2F;智慧卡</a></em></small></p></blockquote><p>不过IC卡不是只有非接触式的，手机使用的sim卡、银行卡上那个裸露的金属芯片也是IC卡，但是是接触式的。本文中则只讨论非接触式IC卡。</p><h2 id="非接触式IC卡"><a href="#非接触式IC卡" class="headerlink" title="非接触式IC卡"></a>非接触式IC卡</h2><p>既然技术已经存在，那么就需要一定的标准来将其统一、规范化。<br>非接触式IC卡一般有三种国际规范：ISO&#x2F;IEC 14443 Type A、ISO&#x2F;IEC 14443 Type B、ISO&#x2F;IEC 15693。三个规范都规定了工作在13.56Mhz下智能标签和读写器的空气接口及数据通信规范，但是类型不同。我们生活中更常见的是ISO&#x2F;IEC 14443 Type A和ISO&#x2F;IEC 14443 Type B规范的设备，15693则与公众关系不太密切，因此本文作为科普暂不讨论。</p><h3 id="14443-A"><a href="#14443-A" class="headerlink" title="14443-A"></a>14443-A</h3><p>14443-A最为常见，其中最为知名的是前文提到的MIFARE系列，国内的复旦卡等早期均是模仿MIFARE系列开发的，MIFARE的解决方案最为流行，也是大家都兼容的方案。</p><blockquote><p>MIFARE是恩智浦半导体公司（NXP Semiconductors）拥有的一系列非接触式智能卡和近傍型卡技术的注册商标。<br>MIFARE包括一系列依循ISO&#x2F;IEC 14443-A规格，利用无线射频识别（频率为13.56MHz）的多种非接触式智能卡专有解决方案。这项技术是最早是1994年由米克朗集团（Mikron Group）开发，在1998年转售给飞利浦电子公司（2006年更名为恩智浦半导体公司）。近年来MIFARE已经普遍在日常生活当中使用，如大众运输系统付费、商店小额消费、门禁安全系统、借书证等。</p><p><small><em>摘自：<a href="https://zh.wikipedia.org/wiki/MIFARE">zh.wikipedia.org&#x2F;wiki&#x2F;MIFARE</a></em></small></p></blockquote><p><img src="/images/227387.gif" data-original="/images/posts/2019/09/jiagou.png"><br>上图为MIFARE卡片的架构，</p><blockquote><p>UID：唯一标识符（Unique Identifier）， RID：安全随机标识符（Random Security Identifier）</p><ul><li><p>卡片架构：卡片上面有一组唯一标识符、通信接口（包含天线及调制解调器）以及一个ASIC里面包含了通信逻辑电路、加密控制逻辑电路与数据存储区（ EEPROM），可以作为电子钱包或其它门禁、差勤考核、借书证等用途。</p></li><li><p>数据存储区块：可分16个区段（sector 0-15）， 每个区段由4个区块（block 0-3）组成，而每个区块都是独立的单元，每1个区块的容量有16Byte。而每个区段的最后一个区块则用来存放2组密钥（KeyA、KeyB），以及密钥对应各自的访问权限（Access bit）。</p></li><li><p>每张卡片第一区段的第一区块（sector 0，block 0）只能读取无法写入数据，称为制造商代码（Manufacturer Code）, 第1－4byte为UID。第5byte为比特计数检查码（bit count check)，其余的存放卡片制造商的数据。所以每张卡片实际能使用的只有15个区段，即便如此也可用于15个不同的应用。</p></li><li><p>读写卡机架构：读卡器包含CPU、电源模块、读（写）模块、记忆模块、控制模块等，有些还有显示模块、定时模块等其他模块。</p></li><li><p>工作流程：当卡片接近读写卡机进入通信天线的感应范围（约2.5公分至10公分）之后，读写卡机便会提供微量电力（约达2伏特之后）驱动卡片上的电路。此时卡、机各以曼彻斯特编码（MANCHESTER Encoding）及米勒编码（Miller encoding）加密通信内容后再以振幅偏移调制（Amplitude Shift Keying，ASK）透过调制解调器收发无线电波信号互相验证是否为正确卡片，如果验证结果正确读写卡机就会确认要访问的数据存储区块，并对该区块进行密码校验，在卡、 机三重认证无误之后，就可以透过加密进行实际工作通信。这个过程大约只需要0.1秒就可以完成。如果同时有多张卡片进入读写卡机感应范围，读写卡机会将卡 片编号并选定1张卡片进行验证直到完成所有卡片验证（称为防碰撞机制）或是离开感应范围为止。</p></li><li><p>卡 机三重认证步骤：1.卡片产生一个随机数RB发送到读卡器。2.读卡器会将接收到的随机数RB依公式加密编码后的TokenAB数值并发送回卡片。3.卡片接 收到TokenAB后，会把加密部分解译出来然后比对参数B、随机数RB。同时并依据收到的随机数RA，引用公式编码后产生TokenBA发送回读卡器。4. 读卡器接收到TokenBA后，又把加密过的部分解译，比较随机数RB，RA与TokenBA中解出之RB、RA是否相符，正确的就可以完成指令（扣款、打 开门锁或是登记其他事项）。</p></li></ul><p><small><em>摘自：<a href="https://zh.wikipedia.org/wiki/MIFARE">zh.wikipedia.org&#x2F;wiki&#x2F;MIFARE</a></em></small></p></blockquote><p>MIFARE系列最常用的就是各种1K卡，也就是存储容量为1Kbytes的卡。简单来说，1K卡将整张卡片的数据区域分割为16个扇区，4个区块，每个区块长度为32位，每一位都是0-F的16进制数，每2位为1Byte，所以每一块为16Bytes，总容量<code>16 * 4 * 16 = 1024Bytes = 1K</code>。每个扇区各自独立，正常情况下，0扇区0块：第1－4byte为UID，第5byte为比特计数检查码（bit count check)，其余的存放卡片制造商的数据，包括卡片类型等。整个0扇区一般无法被更改。剩下15个扇区中每个扇区只有三个块可用，每个扇区的最后一个块的结构为：12位KeyA+8位控制字+12位KeyB。控制字负责控制整个扇区的读写状态，KeyA和B用于开发者自行根据需要来控制使用不同Key的权限。一定程度上算是安全的，但是每个密钥均为固定，所以通过一定的暴力破解和逆向手段，也有可能获得卡片的全部密钥，安全性不足。（下图为数据区块示意图）（没看懂也没事，下文会详细分析的）<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/blocks.png"></p><h3 id="14443-B"><a href="#14443-B" class="headerlink" title="14443-B"></a>14443-B</h3><p>14443-B则用于安全性更高的产品，如二代身份证、电子护照等。事实上，针对14443-B的破解手段也非常罕见，因此我也难以展开细讲。</p><h2 id="MIFARE卡片的破解"><a href="#MIFARE卡片的破解" class="headerlink" title="MIFARE卡片的破解"></a>MIFARE卡片的破解</h2><p>刚介绍了一些原理什么的，我们就开始对其进行破解，是不是哪里不太对？其实这边介绍破解的技术和思路可以更容易地理解MIFARE卡片的原理。之前讲的都是理论概念，这里开始实际操作。</p><p>首先，针对MIFARE卡片的研究，我们可以使用由Jonathan Westhues在做硕士论文中研究Mifare Classic时设计、开发的一款开源硬件<strong>Proxmark3</strong>，可以用于RFID中嗅探、读取以及克隆等相关操作。（其他的还有PN532、ACR122U等，这里不展开细说）这个名为Proxmark3的设备在某宝即可获得，售价几百元不等，一般学习的话选择最便宜的即可。一般卖家会给你提供这样的一个软件以便操作。<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/pm3_easy_gui.png"><br>具体的操作参考卖家给出的教程即可，这里主要对技术问题进行分析。</p><h3 id="默认密码和PRNG"><a href="#默认密码和PRNG" class="headerlink" title="默认密码和PRNG"></a>默认密码和PRNG</h3><p>教程中一般会提到：使用默认密码扫描无法被破解的卡片可以用PRNG破解功能来进行下一步操作。那么默认密码是什么？<br>由于MIFARE的机制，导致卡片中每一个扇区都必须存在密码才能使用，因此需要存在约定俗称的几个普通密码，使用这些常见的密码可以方便在未激活时修改数据，必要时将其更改为更可靠的密码即可。默认密码中一般有：</p><ul><li>FFFFFFFFFFFF</li><li>A0A1A2A3A4A5</li><li>000000000000</li><li>(…)<br>其他还有很多，不同的地方定义不同，但是共同点都是非常简单，很容易猜测。如果卡片中存在这样的密码可以被扫描到，那么这张卡的安全性非常薄弱，克隆甚至修改都不成问题。<br>如果不存在默认密码，那么难道只能穷尽所有的可能，逐一尝试密码吗？事实上MIFARE卡片本身的机制也存在一定的问题，这个问题导致了darkside攻击的存在：PRNG破解。<br>卡片密钥破解的关键是让卡片发送加密数据，再通过算法解出密钥，所以需要欺骗卡片发出加密数据。我们考虑首先要把卡片中的密钥相关的数据骗出来，也就是让卡片发送出来一段加密的数据，我们通过这段加密的数据才能把密钥破解出来，如果卡片不发送加密的数据给我们，那就没法破解了。而第一次验证的时候卡片会发送明文的随机数给读卡器，然后验证读卡器发送加密数据给卡片，卡片验证失败就停止，不会发送任何数据了，不过，经过研究人员大量的测试后发现卡片算法中存在漏洞，当读卡器发出的密文中某8bit数据正确时，读卡器就会回复一个4bit的密文，而这个密文就包含了密钥的信息，再通过解密算法即可解出密钥。Linux下的mfcuk（MiFare Classic Universal toolKit）就是这样一个基于darkside原理攻击全加密卡的程序。GitHub：<a href="https://github.com/nfc-tools/mfcuk">nfc-tools&#x2F;mfcuk</a>。因此，通过这个原理，就可以使用读卡器进行darkside攻击，也就是一般所说的PRNG破解。<br>关于PRNG的详细内容可以看以下资料：</li></ul><blockquote><p>伪随机数生成器（pseudo random number generator，PRNG），又被称为确定性随机比特生成器（deterministic random bit generator，DRBG），是一个生成数字序列的算法，其特性近似于随机数序列的特性。PRNG生成的序列并不是真随机，因此它完全由一个初始值决定，这个初始值被称为PRNG的随机种子（seed，但这个种子可能包含真随机数）。尽管接近于真随机的序列可以通过硬件随机数生成器生成，但伪随机数生成器因为其生成速度和可再现的优势，在实践中也很重要。<br>PRNG是模拟（例如，蒙特卡洛方法）、电子游戏（例如过程生成）以及密码学等应用的核心。加密应用程序要求不能从以前的输出中预测输出，而且更复杂的、不具有简单PRNGs线性特性的算法是必要的。<br>良好的统计特性，是PRNG的核心。通常，需要严格的数学分析来证明PRNG生成的序列足够接近真随机以满足预期用途。John von Neumann（约翰·冯·诺伊曼）警告不要把PRNG错误地解释为真随机数生成器。</p><p>PRNG通过设定随机种子可以从任意初始值开始生成。同样的初始值总是生成同样的序列。PRNG的周期定义为：所有初始值的最大长度的无重复前缀序列。周期受状态数的限制，通常用比特位数表示。然而，每增加一个比特位，周期长度就可能增加一倍，所以构建周期足够长的PRNG对于许多实际应用程序来说是很容易的。<br>如果PRNG的内部状态包含n位，那么它的周期不会超过2n，甚至可能非常短。对于大多数PRNG，周期长度的计算并不需要遍历整个周期。线性反馈移位寄存器（LFSR）的周期通常正好是2n−1。线性同余方法的周期可以通过因式分解进行计算。 尽管PRNG在达到周期之后会出现重复的结果，但重复序列的出现并不意味着到达了一个周期，因为它的内部状态可能比输出要大很多。对于输出为1位的PRNGs，这一点尤其明显。</p><p><small><em>摘自：<a href="https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8">zh.wikipedia.org&#x2F;wiki&#x2F;伪随机数生成器</a></em></small></p></blockquote><h3 id="nested-authentication-攻击（大家常说的验证漏洞攻击）"><a href="#nested-authentication-攻击（大家常说的验证漏洞攻击）" class="headerlink" title="nested authentication 攻击（大家常说的验证漏洞攻击）"></a>nested authentication 攻击（大家常说的验证漏洞攻击）</h3><p>首先我们需要了解卡片本身的验证逻辑：<br>第一次验证时，读卡器首先验证0扇区的密码，卡片给读卡器发送一个随机数n1（明文），然后读卡器通过跟密码相关的加密算法加密n1，同时自己产生一个密文随机数n2，发送给卡片。卡片用自己的密码解密之后，如果解密出来的就是自己之前发送的n1，则认为正确，然后通过自己的密码相关的算法加密读卡器的随机数n2成为密文n3，发送给读卡器。读卡器解密之后，如果跟自己之前发送的随机数n2相同，则认为验证通过，之后所有的数据都通过此算法加密传输。<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/nested.png"><br>首先记住这里面只有第一次的n1是明文，之后都是密文，而且n1是卡片发送的，也就是验证过程中，卡片是主动先发随机数的。我们破解的时候，读卡器中肯定没有密码（如果有就不用破解了），那么卡片发送一个n1给读卡器之后，读卡器用错误的密码加密之后发送给卡片，卡片肯定解密错误，然后验证中断，这个过程中，我们只看到卡片发送的明文随机数，卡片根本没有把自己保存的密码相关的信息发送出来，那怎么破解呢？<br>所以，要已知一个扇区的密码，第一次验证的时候，使用这个扇区验证成功之后，后面所有的数据交互都是密文，读其他扇区数据的时候，也需要验证，也是卡片首先发送随机数n1，但是这里的n1是加密的数据。既然每个扇区的密码是独立的，那么现在的加密实际上就是通过卡片被读取的，相对于第一个读取的扇区的“其他扇区”的密码相关的算法加密的n1，这个数据中就包含了这个扇区的密码信息，所以我们才能够通过算法漏洞继续分析出扇区的密码是什么。<br>这也是为什么nested authentication攻击必须要知道某一个扇区的密码，然后才能破解其他扇区的密码。</p><h3 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h3><p>以上两个破解方式组合就可以解决大部分的M1卡片了，但是可能出现例外，所以我们还有一种方法是嗅探攻击。由于卡片和读卡器之间的通信是在几厘米之内的无线通信，所以使用Proxmark3也可以对其进行监控分析。<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/snoop.png"><br>如上图，刷一次卡后，拿开等待几秒，电脑会返回嗅探到的数据。注意寻找60或者61开头的数据，60含义是使用A密码访问，61是使用B密码。开头是RDR的是读卡机发出的指令，TAG则是卡片发出的指令。红圈中表示读卡机访问了第21个块。21是十六进制，转换成十进制是33块第一个方框“b2a6de1d”是卡片UID，第二个方框“f80eee3c”是tag challenge(卡片挑战数)，第三个方框“4ec88403”是reader challenge(读卡器挑战数)，第四个方框“d2dd5180”是reader respones(读卡器响应数)，第五个方框“2bb17b5e”是 tag respones(卡片回应数)，依次填入“crapto1gui.exe”这个软件中。<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/crapto1.png"><br>点击crak key即可计算出密匙，结论是：读卡机使用KeyA访问了第33块，使用的密码是FFFFFFFFFFFF。<br>由于M1卡在读卡机和卡片交互数据和密码时，使用了crypto1算法。即便同一张卡，同样的密码，嗅探得到交互数据也是随机的，但是他存在破解算法crapto1。只要获得前面提到的四组随机数组，以及UID，就可以反解出密匙。通过crapto1之类的计算工具就可以计算出需要的数据。</p><h2 id="白卡"><a href="#白卡" class="headerlink" title="白卡"></a>白卡</h2><p>通过以上的破解分析，我们了解了M1卡的运行原理和安全漏洞。根据这些安全漏洞，万能的华强北制作出了许多仿制M1的白卡，又被国外称之为Chinese Magic Card。同时也存在后门指令，被称为chinese magic backdoor command。</p><h3 id="UID卡"><a href="#UID卡" class="headerlink" title="UID卡"></a>UID卡</h3><ul><li>所有区块可被重复读写</li><li>卡片UID可改且使用后门指令更改UID</li><li>UID可被重复修改</li><li>响应后门指令(意味着可被使用后门指令检测是否为克隆卡的机器发现)</li></ul><h3 id="CUID卡"><a href="#CUID卡" class="headerlink" title="CUID卡"></a>CUID卡</h3><ul><li>所有区块可被重复读写</li><li>卡片UID可改且使用普通写指令更改UID</li><li>不响应后门指令(意味着不容易被反克隆系统发现)</li></ul><h3 id="FUID卡"><a href="#FUID卡" class="headerlink" title="FUID卡"></a>FUID卡</h3><ul><li>0扇区可写且仅可写入一次</li><li>写入后0扇区不可更改</li><li>不响应后门指令</li></ul><p>这些卡某宝售价大约0.2-1元一张，非常便宜，异形卡则稍微贵一点。UID卡只要通过读卡器验证是否存在后门指令即可识别，因此反克隆技术非常成熟（然而我们学校并没有ORZ）。</p><h2 id="CPU卡"><a href="#CPU卡" class="headerlink" title="CPU卡"></a>CPU卡</h2><p>那么手机中的NFC模块有公交卡、银行卡闪付，甚至还有模拟门禁卡的功能，这是使用的以上几种白卡的技术完成的吗？事实上并不是。手机中的NFC模块目前多为全功能的NFC模组，可以实现NFC技术的大部分读写功能，也可以自行模拟为CPU卡。CPU卡是MIFARE之后发展出的全新卡种，卡内的集成电路中带有微处理器CPU、存储单元（包括随机存储器RAM、程序存储器ROM（FLASH）、用户数据存储器EEPROM）以及芯片操作系统COS。装有COS的CPU卡相当于一台微型计算机，不仅具有数据存储功能，同时具有命令处理和数据安全保护等功能。一般内部运行一个Java虚拟机，可以写入简单的程序，接受与MIFARE不同的指令，安全性取决于本身程序的安全程度，更难以被破解。目前最常用的就是JCOP系列。</p><blockquote><p>Java Card OpenPlatform (JCOP) is a smart card operating system for the Java Card platform developed by IBM Zürich Research Laboratory. On 31 January 2006 the development and support responsibilities transferred to the IBM Smart Card Technology team in Böblingen, Germany. Since July 2007 support and development activities for the JCOP operating system on NXP &#x2F; Philips silicon are serviced by NXP Semiconductors.</p><p>The title originates from the standards it complies with:</p><ul><li>Java Card specifications</li><li>GlobalPlatform (formerly known as Visa Inc OpenPlatform) specifications<br>A Java Card JCOP has a Java Card Virtual Machine (JCVM) which allows it to run applications written in Java programming language.</li></ul><p><small><em>摘自：<a href="https://en.wikipedia.org/wiki/Java_Card_OpenPlatform">zh.wikipedia.org&#x2F;wiki&#x2F;Java_Card_OpenPlatform</a></em></small></p></blockquote><p>手机NFC则一般基于这样的技术开发，CPU卡本身与MIFARE不兼容，为了保证推广，许多厂商在制作时会利用JCOP本身的特性去模拟M1卡，国内手机中的模拟门禁卡就是这样的技术产生的。由于这种技术属于灰色地带，海外手机出厂一般不自带，国内前两年可以模拟的范围还比较广，现在则大大限制，只能模拟一般密钥为FFFFFFFFFFFF的普通卡。</p><p>手机NFC中的闪付、公交卡等也不是直接模拟实体卡，而是由发卡方下发密钥，为手机本身发放新卡，因此卡号等也与实体卡不同，公交卡也需要另交押金。由于这样的网络下发的卡属于异形卡，传统上公交卡公司并不愿意提供注销服务（谁愿意把收到手里的押金退掉呢？滑稽( ﹁ ﹁ ) ~→）。不过强如Apple倒是有资本和公交卡公司谈，于是iPhone用户就可以享受到可退卡的服务了。你问为啥华为小米这样的公司谈不下来？这可就是未解之谜了呢┑(￣Д ￣)┍，技术上是不存在障碍的，那么障碍在哪里呢？</p><h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><p>好了，本篇关于NFC技术的科普就告一段落了。不得不说国内这方面的资料少的可怜，许多知识都是我从论坛或者大佬那里学来的，在这里也非常感谢UCLA的BH4EXD大佬在我研究这些技术时为我提供的帮助，希望这篇文章能帮助到对于射频技术感兴趣，却没有就读相关专业的你，少走一些弯路。</p><p>最后，引用一句罗老师的名言吧（绝对不是广告）：</p><blockquote><p>生命不息，折腾不止。————罗永浩<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/zheteng.jpg"></p></blockquote><br><br><br><hr><p>参考资料：</p><ul><li><a href="https://www.freebuf.com/articles/wireless/8792.html">RFID破解三两事 - FreeBuf互联网安全新媒体平台</a></li><li><a href="https://zhuanlan.zhihu.com/p/67532665">详谈Mifare Classic 1K卡 - 知乎</a></li><li><a href="https://zh.wikipedia.org/">维基百科</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;small&gt;&lt;em&gt;本文中提到的&lt;code&gt;卡片&lt;/code&gt;，若非特别注明，均为非接触式卡片，不再另外声明。&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;</summary>
      
    
    
    
    <category term="NFC" scheme="https://blog.gadfly.vip/categories/NFC/"/>
    
    
    <category term="IC卡" scheme="https://blog.gadfly.vip/tags/IC%E5%8D%A1/"/>
    
    <category term="单片机" scheme="https://blog.gadfly.vip/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="近场通信" scheme="https://blog.gadfly.vip/tags/%E8%BF%91%E5%9C%BA%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>proxmark3固件编译</title>
    <link href="https://blog.gadfly.vip/2019/09/proxmark3-fm-make/"/>
    <id>https://blog.gadfly.vip/2019/09/proxmark3-fm-make/</id>
    <published>2019-09-26T14:04:26.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道在Github上有proxmark3的最新固件，今天聊一聊在windows下如何编译固件源码并刷入proxmark3。</p><span id="more"></span><p>pm3的固件基本由c语言构成，在windows下进行编译存在一定的难度，好在GitHub上早有大神针对其制作的脚本，可以轻松地配置编译所需要的环境。</p><h3 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h3><p>这里我们使用的是<a href="https://github.com/Gator96100/ProxSpace">ProxSpace</a>,解压到合适的地方即可。</p><blockquote><p>ProxSpace is a collection of tools that are required to compile the firmware and client of the Proxmark III. At its core ProxSpace uses msys2. MSYS2 is a software distro and building platform for Windows, it provides a bash shell, Autotools, revision control systems and the like for building native Windows applications using MinGW-w64 toolchains. ProxSpace uses the GNU Arm Embedded Toolchain for compiling the Proxmark III firmware.</p></blockquote><p><img src="/images/227387.gif" data-original="/images/posts/2019/09/proxspace.png"><br>然后准备PM3的源码：<a href="https://github.com/Proxmark/proxmark3/">Proxmark&#x2F;proxmark3</a>把他全部解压到ProxSpace的pm3文件夹中（没有的话就自己新建一个,如图即可）。<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/pm3.png"></p><h3 id="编译固件"><a href="#编译固件" class="headerlink" title="编译固件"></a>编译固件</h3><p>双击打开<code>runme64.bat</code>（如果还是32位系统的话，则使用<code>runme.bat</code>），然后会开始自动配置环境，时间可能很长（视网速和本机性能而定），包括MinGW、QT之类的<del>什么奇奇怪怪的东西</del>，接着执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等待固件自动编译完成即可。</p><h3 id="刷入固件"><a href="#刷入固件" class="headerlink" title="刷入固件"></a>刷入固件</h3><p>在刚才编译完的窗口中执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./client/flasher comx -b ./bootrom/obj/bootrom.elf./client/flasher comx ./armsrc/obj/fullimage.elf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中comx代表Proxmark的端口号，根据本机情况修改x即可。如果刷完第一个ELF以后机器无反应或者掉线的话，拔掉数据线，按住机身按钮，再插上，不要松手，几秒钟后电脑就会识别到机器，然后再刷入第二个固件即可。第一个固件是pm3的bootloader，第二个是完整镜像，更新固件需要全部刷入，并且需要先更新bootloader以防出错。如果在刷入第一个固件时就出现了刷到一半端口号改变的情况，则需要使用脚本对其强制多次刷入，可以参考以下脚本（存为bat）自行修改制作。若脚本执行过程中依然执行不下去，则重新连接后再次启动即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo offcolor 0aMODE CON <span class="token assign-left variable">COLS</span><span class="token operator">=</span><span class="token number">80</span> <span class="token assign-left variable"><span class="token environment constant">LINES</span></span><span class="token operator">=</span><span class="token number">36</span>title ！！！！！！！！！！！！！！！！！注意！！！！！！！！！！！！！！！！！echo.echo.echo.<span class="token builtin class-name">echo</span>                 ┏─────────────────────┓<span class="token builtin class-name">echo</span>                 │<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>注意<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>│<span class="token builtin class-name">echo</span>                 │─────────────────────│<span class="token builtin class-name">echo</span>                 │   请先关闭正在运行的GUI中文或英文软件    │<span class="token builtin class-name">echo</span>                 │   如果依然连接不上，缓慢走省略号表示     │<span class="token builtin class-name">echo</span>                 │   串口调用冲突，需要在任务管理器中关闭   │<span class="token builtin class-name">echo</span>                 │   <span class="token string">"proxmark3.exe"</span>进程 。并重启刷机程序   │<span class="token builtin class-name">echo</span>                 │                                          │<span class="token builtin class-name">echo</span>                 │   刷机过程中如果长时间等待超过一分钟无   │<span class="token builtin class-name">echo</span>                 │   反应，不要关闭窗口，按住按钮不放，重新 │<span class="token builtin class-name">echo</span>                 │   拔插USB口即可强制刷入，直至升级完成    │<span class="token builtin class-name">echo</span>                 │   即可松开按钮！                         │<span class="token builtin class-name">echo</span>                 │                                          │<span class="token builtin class-name">echo</span>                 │                                          │<span class="token builtin class-name">echo</span>                 ┗─────────────────────┛echo.echo.echo.<span class="token builtin class-name">set</span> <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token builtin class-name">set</span> /p <span class="token assign-left variable">num</span><span class="token operator">=</span> 请输入【设备管理器—端口—Proxmark3】的串口号<span class="token punctuation">(</span>例如<span class="token string">"5"</span><span class="token punctuation">)</span>:echo.echo.goto :all:allclstitle 正在烧写Proxmark3固件至<span class="token punctuation">[</span>xxx固件<span class="token punctuation">]</span>,请等候片刻……echo.<span class="token builtin class-name">echo</span>                 ┏────────────────────┓<span class="token builtin class-name">echo</span>                 │正在刷新 bootrom.elf,请等候片刻……     │<span class="token builtin class-name">echo</span>                 ┗────────────────────┛echo..<span class="token punctuation">\</span>client<span class="token punctuation">\</span>flasher.exe com%num% -b  .<span class="token punctuation">\</span>bootrom<span class="token punctuation">\</span>obj<span class="token punctuation">\</span>bootrom.elf<span class="token function">ping</span> <span class="token number">127.0</span>.0.1 -n <span class="token number">8</span> <span class="token operator">></span>nultaskkill /f /im flasher.exe:nextclsecho.<span class="token builtin class-name">echo</span>                 ┏────────────────────┓<span class="token builtin class-name">echo</span>                 │正在刷新 fullimage.elf,请等候片刻……   │<span class="token builtin class-name">echo</span>                 ┗────────────────────┛echo..<span class="token punctuation">\</span>client<span class="token punctuation">\</span>flasher.exe com%num%  .<span class="token punctuation">\</span>armsrc<span class="token punctuation">\</span>obj<span class="token punctuation">\</span>fullimage.elf<span class="token function">ping</span> <span class="token number">127.0</span>.0.1 -n <span class="token number">3</span> <span class="token operator">></span>nultaskkill /f /im flasher.execlstitle 恭喜Proxmark3-xxx固件成功升级！echo.echo.<span class="token builtin class-name">echo</span>                ┏──────────────────────┓<span class="token builtin class-name">echo</span>                │    恭喜您！ xxx出厂固件全部刷写完成！    │<span class="token builtin class-name">echo</span>                │                                            │<span class="token builtin class-name">echo</span>                │日行一善，善如春园之草，不见其长，日有所增<span class="token punctuation">;</span> │<span class="token builtin class-name">echo</span>                │                                            │<span class="token builtin class-name">echo</span>                │日行一恶，恶如磨刀之石，不见其亏，日有所减<span class="token operator">!</span> │<span class="token builtin class-name">echo</span>                │                                            │<span class="token builtin class-name">echo</span>                │                                   BinAry   │<span class="token builtin class-name">echo</span>                ┗──────────────────────┛echo.pause.clsMODE CON <span class="token assign-left variable">COLS</span><span class="token operator">=</span><span class="token number">130</span> <span class="token assign-left variable"><span class="token environment constant">LINES</span></span><span class="token operator">=</span><span class="token number">36</span>cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而proxspace工作目录下的<code>.\pm3\client\proxmark3.exe</code>就是匹配最新固件的pm3的命令行客户端了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们知道在Github上有proxmark3的最新固件，今天聊一聊在windows下如何编译固件源码并刷入proxmark3。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="https://blog.gadfly.vip/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="单片机" scheme="https://blog.gadfly.vip/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="固件" scheme="https://blog.gadfly.vip/tags/%E5%9B%BA%E4%BB%B6/"/>
    
    <category term="编译" scheme="https://blog.gadfly.vip/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Vmware安装黑苹果全记录</title>
    <link href="https://blog.gadfly.vip/2019/09/vmware-hackintosh/"/>
    <id>https://blog.gadfly.vip/2019/09/vmware-hackintosh/</id>
    <published>2019-09-20T09:05:09.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>由于学校有个Ios开发课程，不得不开始使用我最厌恶的MACos。</p><span id="more"></span><h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><h5 id="首先Google一个Vmware出来装好"><a href="#首先Google一个Vmware出来装好" class="headerlink" title="首先Google一个Vmware出来装好"></a>首先Google一个Vmware出来装好</h5><p>然后找一下合适的MACos镜像。我这边用的是：<br>百度网盘：链接: <a href="https://pan.baidu.com/s/1Y-SAspAY-28pccir9JsDhA">https://pan.baidu.com/s/1Y-SAspAY-28pccir9JsDhA</a> 提取码: kegh<br>然后前往<a href="https://github.com/DrDonk/unlocker">https://github.com/DrDonk/unlocker</a>下载vmware-unlocker以便解除Vmware对MAC虚拟机的限制</p><h5 id="unlocker"><a href="#unlocker" class="headerlink" title="unlocker"></a>unlocker</h5><p>关闭vmware的所有服务<br>解压并打开下载的UnLocker文件夹, 右键win-install, 选择以管理员身份运行<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/unlocker.webp"></p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><p>打开VMWare WorkStation, 点击创建新的虚拟机，选择自定义高级<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/newVM.webp"></p><h5 id="选择虚拟机版本"><a href="#选择虚拟机版本" class="headerlink" title="选择虚拟机版本"></a>选择虚拟机版本</h5><p><img src="/images/227387.gif" data-original="/images/posts/2019/09/compatibility.webp"></p><h5 id="选择操作系统类型"><a href="#选择操作系统类型" class="headerlink" title="选择操作系统类型"></a>选择操作系统类型</h5><p><img src="/images/227387.gif" data-original="/images/posts/2019/09/systemType.webp"><br>操作系统类型选择Apple Mac OS X<br>版本选择你的镜像版本, 网盘中分享的是Mac OS 10.13版本<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/continueInstall.webp"></p><h5 id="网络NAT即可，其他默认"><a href="#网络NAT即可，其他默认" class="headerlink" title="网络NAT即可，其他默认"></a>网络NAT即可，其他默认</h5><p>新建磁盘，大小自己决定，建议使用<strong>单个文件</strong>而不是多个文件<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/newDisk.webp"></p><h5 id="修正文件"><a href="#修正文件" class="headerlink" title="修正文件"></a>修正文件</h5><p>打开你虚拟机存放的文件夹, 找到这个vmx扩展名的文件, 右键用记事本打开<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/vmx.webp"><br><img src="/images/227387.gif" data-original="/images/posts/2019/09/vmxEdit.webp"><br>在这两个之间, 插入如下代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">smc.version <span class="token operator">=</span> <span class="token string">"0"</span>cpuid.0.eax <span class="token operator">=</span> <span class="token string">"0000:0000:0000:0000:0000:0000:0000:1011"</span>cpuid.0.ebx <span class="token operator">=</span> <span class="token string">"0111:0101:0110:1110:0110:0101:0100:0111"</span>cpuid.0.ecx <span class="token operator">=</span> <span class="token string">"0110:1100:0110:0101:0111:0100:0110:1110"</span>cpuid.0.edx <span class="token operator">=</span> <span class="token string">"0100:1001:0110:0101:0110:1110:0110:1001"</span>cpuid.1.eax <span class="token operator">=</span> <span class="token string">"0000:0000:0000:0001:0000:0110:0111:0001"</span>cpuid.1.ebx <span class="token operator">=</span> <span class="token string">"0000:0010:0000:0001:0000:1000:0000:0000"</span>cpuid.1.ecx <span class="token operator">=</span> <span class="token string">"1000:0010:1001:1000:0010:0010:0000:0011"</span>cpuid.1.edx <span class="token operator">=</span> <span class="token string">"0000:1111:1010:1011:1111:1011:1111:1111"</span>featureCompat.enable <span class="token operator">=</span> <span class="token string">"FALSE"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装MACos的过程中可能会遇到找不到vmware分配的虚拟磁盘的情况，此时选择磁盘工具，对没有格式化的虚拟磁盘进行格式化即可</p><h4 id="更改分辨率"><a href="#更改分辨率" class="headerlink" title="更改分辨率"></a>更改分辨率</h4><p>首先提高虚拟机设置中此处的分辨率<br><img src="/images/227387.gif" data-original="/images/posts/2019/09/fenbianlv.webp"><br>然后进入系统中，在终端输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1920</span>*1080分辨率：<span class="token function">sudo</span> nvram AC20C489-DD86-4E99-992C-B7C742C1DDA9:width<span class="token operator">=</span>%80%07%00%00<span class="token function">sudo</span> nvram AC20C489-DD86-4E99-992C-B7C742C1DDA9:height<span class="token operator">=</span>%38%04%00%00 <span class="token number">3840</span>*2160分辨率：<span class="token function">sudo</span> nvram AC20C489-DD86-4E99-992C-B7C742C1DDA9:width<span class="token operator">=</span>%00%0F%00%00<span class="token function">sudo</span> nvram AC20C489-DD86-4E99-992C-B7C742C1DDA9:height<span class="token operator">=</span>%70%08%00%00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：<br>width&#x3D;%00%0F%00%00 是宽度的16进制表示，将四个数字倒过来写就是 00 00 0f 00, 相当于十进制的3840<br>height&#x3D;%70%08%00%00 是高度的16进制表示，将四个数字倒过来写就是 00 00 08 70, 相当于十进制的2160<br>所以，上面的两条命令执行完之后，分辨率将被设置为 3840*2160， 其他的分辨率依此类推</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.jianshu.com/p/4d83f2d51abe">(AMD Ryzen, Inter)在VMWare中安装Mac OS 10.13 High Sierra,黑苹果安装教程 - 简书</a></li><li><a href="https://www.dkukoc.com/post/226.html">VMware15 安装 mac OS 10.14 分辨率调整为1920*1080？_电脑基础_Dkukoc</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于学校有个Ios开发课程，不得不开始使用我最厌恶的MACos。&lt;/p&gt;</summary>
    
    
    
    <category term="纪实" scheme="https://blog.gadfly.vip/categories/%E7%BA%AA%E5%AE%9E/"/>
    
    
    <category term="纪实" scheme="https://blog.gadfly.vip/tags/%E7%BA%AA%E5%AE%9E/"/>
    
    <category term="系统" scheme="https://blog.gadfly.vip/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="黑苹果" scheme="https://blog.gadfly.vip/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare免费版设置笔记</title>
    <link href="https://blog.gadfly.vip/2019/07/cloudflare-free-config/"/>
    <id>https://blog.gadfly.vip/2019/07/cloudflare-free-config/</id>
    <published>2019-07-05T07:50:53.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/227387.gif" data-original="/images/posts/2019/07/1.png" alt="图片"><br>首先当然是到这里（<a href="https://www.cloudflare.com/">https://www.cloudflare.com</a>）来登录&#x2F;注册。注册很简单，一个邮箱就行了。然后他会给你发一封确认邮件，确认完成即可进行配置。<br>然后会提示你输入你的域名，这时输入不带子域名的域名即可，如我的是<code>gadfly.vip</code>，然后点击<code>add site</code>即可，它会自动扫描你已经存在的DNS解析记录，不过有可能解析不全。接下来它会让你把你的DNS服务器改成他给你提供的。每个人的DNS服务器不一定一样，按照网页上给你提供的去修改即可。</p><h3 id="点击上面的DNS标签后即可打开这个页面"><a href="#点击上面的DNS标签后即可打开这个页面" class="headerlink" title="点击上面的DNS标签后即可打开这个页面"></a>点击上面的DNS标签后即可打开这个页面</h3><p><img src="/images/227387.gif" data-original="/images/posts/2019/07/2.png" alt="图片"><br>其中橙黄色的云朵表示使用CDN，灰色的表示不使用。Cloudflare不支持在根域名下同时绑定MX记录和A记录，配置时需要注意。</p><h3 id="Crypto标签中的设置用于配置SSL相关内容。"><a href="#Crypto标签中的设置用于配置SSL相关内容。" class="headerlink" title="Crypto标签中的设置用于配置SSL相关内容。"></a>Crypto标签中的设置用于配置SSL相关内容。</h3><p><img src="/images/227387.gif" data-original="/images/posts/2019/07/3.png" alt="图片"><br>Cloudflare提供了三种SSL模式</p><ul><li>Flexible - 用户至Cloudflare为HTTPS加密传输，Cloudflare至服务器为HTTP传输</li><li>Full - 两端均为HTTPS加密传输，服务器端可以使用自己签名的证书</li><li>Full（Strict）- 两端均为HTTPS加密传输，且服务器端必须使用可信任的证书</li></ul><p><img src="/images/227387.gif" data-original="/images/posts/2019/07/4.png" alt="图片"><br>origin certificates可以通过cloudflare生成一份可信任的SSL证书并下载，可以安装到服务器上。<br>Always Use HTTPS用于强制HTTPS访问。<br>HSTS是告诉浏览器网站只通过HTTPS访问，防止有攻击者拦截用户通过HTTP访问的请求。个人觉得开启会更好。<br><img src="/images/227387.gif" data-original="/images/posts/2019/07/5.png" alt="图片"><br>这些全开着就完事了，最小TLS版本建议低一点，要不然垃圾浏览器就打不开了。<br><img src="/images/227387.gif" data-original="/images/posts/2019/07/6.png" alt="图片"><br>TLS1.3开着，自动HTTPS重写是把你网页上的http链接全都转成https，如果你网站上有些资源没法走https的话，那还是别开了</p><h3 id="Speed里这些都开着吧"><a href="#Speed里这些都开着吧" class="headerlink" title="Speed里这些都开着吧"></a>Speed里这些都开着吧</h3><p><img src="/images/227387.gif" data-original="/images/posts/2019/07/7.png" alt="图片"><br><img src="/images/227387.gif" data-original="/images/posts/2019/07/8.png" alt="图片"><br><img src="/images/227387.gif" data-original="/images/posts/2019/07/9.png" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/227387.gif&quot; data-original=&quot;/images/posts/2019/07/1.png&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;首先当然是到这里（&lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;htt</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.gadfly.vip/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="笔记" scheme="https://blog.gadfly.vip/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Cloudflare" scheme="https://blog.gadfly.vip/tags/Cloudflare/"/>
    
    <category term="CDN" scheme="https://blog.gadfly.vip/tags/CDN/"/>
    
    <category term="配置" scheme="https://blog.gadfly.vip/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>算法评估方法</title>
    <link href="https://blog.gadfly.vip/2019/07/Algorithm-product-evaluation-method/"/>
    <id>https://blog.gadfly.vip/2019/07/Algorithm-product-evaluation-method/</id>
    <published>2019-07-03T07:34:07.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>精确率(precision)、准确率(accuracy)和召回率（recall）</p><table><thead><tr><th align="left">实际值 \ 预测值</th><th align="left">正样本</th><th align="left">负样本</th></tr></thead><tbody><tr><td align="left">正</td><td align="left">TP</td><td align="left">FN</td></tr><tr><td align="left">负</td><td align="left">FP</td><td align="left">TN</td></tr></tbody></table><ul><li>TP，将正的样本预测为正，True Positive，预测对了</li><li>FN，将正样本预测为负值，False Negtive，预测错了</li><li>TN，将负样本与预测为负值，True  Negtive 预测对了</li><li>FP，将负样本预测为正，False Positive， 预测错了</li></ul><h2 id="一、召回率（recall）"><a href="#一、召回率（recall）" class="headerlink" title="一、召回率（recall）"></a>一、召回率（recall）</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">R  = 预测为正的对的样本/ 实际为正样本   = TP /(TP+FN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>针对我们原来的正样本而言的，它表示的是正例样本中有多少被预测正确了。大白话就是“正例样本里你的预测对了多少”</p><p>例如，使用算法扩写文章100篇，10篇没有扩写成功，90篇成功进行了扩写，人工对于扩写质量给于正反评分，为正的文章23篇，那么扩写算法召回率：23&#x2F;100 &#x3D; 0.23；</p><p>在针对搜索：召回率为查全率：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">查全率＝检索出的相关信息量 / 系统中的相关信息总量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，使用关键词“马云”搜索出一张马云和100张马和云的图片，数据库系统中实际上有10篇马云，那么查全率：1&#x2F;10 &#x3D; 0.10；</p><h2 id="二、精确率（Precision）"><a href="#二、精确率（Precision）" class="headerlink" title="二、精确率（Precision）"></a>二、精确率（Precision）</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">P = 预测对的正样本 / 预测为正预测结果  = TP/ (TP+FP)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>预测为正的样本中有多少是真正的正样本。那么预测为正就有两种可能了，一种就是把正类预测为正类(TP)，另一种就是把负类预测为正类(FP)，也就是“ 你预测为正例的里面有多少是对的”</p><p>例如，纠错算法，测试100个词的文本，识别出错误词有20个（TP+FP&#x3D;20），其中被误判为错词14个（FP&#x3D;14），6个错词判断正确（TP&#x3D;6），4个错词没有识别出来（FN&#x3D;4），人工对于成功纠出错结果正反打分，6&#x2F;20 &#x3D; 0.3 。</p><p>在针对搜索：精确率为查准率</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">查准率 = 检索出的相关信息量 / 检索出的信息总量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，使用关键词“马云”搜索出一张马云和99张马和云的图片，那么查准率：1&#x2F;100 &#x3D; 0.01；</p><h2 id="三、准确率（Accuracy）"><a href="#三、准确率（Accuracy）" class="headerlink" title="三、准确率（Accuracy）"></a>三、准确率（Accuracy）</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">A = 预测对的/所有样本  = (TP+TN)/(TP+TN+FP+FN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>针对我们原来所有样本而言的，它表示的是所有样本有多少被准确预测了。</p><h2 id="四、F1"><a href="#四、F1" class="headerlink" title="四、F1"></a>四、F1</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">2/F1 = 1/P + 1/R<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="F1值为精确率和召回率的调和平均数，值越大越好"><a href="#F1值为精确率和召回率的调和平均数，值越大越好" class="headerlink" title="F1值为精确率和召回率的调和平均数，值越大越好"></a>F1值为精确率和召回率的调和平均数，值越大越好</h2><p>五、误报率和漏报率<br>误报率（虚报率）和漏报率，误报率&#x3D;1-查准率，漏报率&#x3D;1-查全率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;精确率(precision)、准确率(accuracy)和召回率（recall）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;实际值 \ 预测值&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;正样本&lt;/th&gt;
&lt;th align=&quot;le</summary>
      
    
    
    
    <category term="优化" scheme="https://blog.gadfly.vip/categories/%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="优化" scheme="https://blog.gadfly.vip/tags/%E4%BC%98%E5%8C%96/"/>
    
    <category term="测试" scheme="https://blog.gadfly.vip/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="笔记" scheme="https://blog.gadfly.vip/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>产品体验优化清单</title>
    <link href="https://blog.gadfly.vip/2019/07/Product-Experience-Optimization-Checklist/"/>
    <id>https://blog.gadfly.vip/2019/07/Product-Experience-Optimization-Checklist/</id>
    <published>2019-07-03T07:29:14.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>“优化已有产品的体验”，这是用户体验相关岗位职责中常见的描述。我们的产品常常是在快速的迭代过程中不断完善的，就像孩子生下来需要养育才能长大一样，优化已有功能&#x2F;产品，和设计新功能&#x2F;产品同样重要，不可偏废。<br>但是，相比实现新功能，已有功能的优化总是显得没有那么紧迫而且很零散，导致了迭代优化的计划总是被归入“重要不紧急”甚至是“不重要不紧急”的象限，变成了东一棒子西一榔锤的买卖。我们可以通过可用性测试来发现问题，但是测试往往受到时间、用户邀约、场地和设备等条件的限制，可能无法进行。更多时候，设计师需要根据一定的原则（例如可用性准则）进行走查，以快速地发现并解决问题。<br>这篇小文章关心的问题是：如果想对非娱乐导向产品已有的交互设计进行优化，我们<br>•    需要从哪些方面考虑<br>•    遵从什么样的原则<br>•    如何开始检查现有的设计<br>•    如何确定优化的优先级</p><p>而不涉及：<br>•    新功能&#x2F;产品的交互设计过程<br>•    娱乐导向产品的设计优化<br>•    产品概念、功能层次的优化<br>•    适合每一类型产品的tips<br>•    具体的优化方法</p><h3 id="一、需要优化什么-Considerations"><a href="#一、需要优化什么-Considerations" class="headerlink" title="一、需要优化什么 (Considerations)"></a>一、需要优化什么 (Considerations)</h3><p>“设计原则的主要目的之一就是优化用户的产品体验。对于生产工具和其他非娱乐导向的产品而言，这意味着将工作负荷降至最低。”——《交互设计精髓》<br>行为和界面层面的设计原则告诉我们，应该为降低用户的工作负荷而设计。但是我们常常不够贴心，不知不觉就对用户设下了种种考验，让他们抓狂：</p><h4 id="1-视觉负担-visual-work"><a href="#1-视觉负担-visual-work" class="headerlink" title="1.视觉负担 visual work"></a>1.视觉负担 visual work</h4><p>•    需要分解布局<br>•    需要区分内容层次<br>•    需要区分视觉元素<br>•    需要努力定位目标信息<br>•    需要识别阅读起点<br>•    需要经常变换视线<br>•    视觉流被干扰、打断</p><h4 id="2-认知负担-cognitive-work"><a href="#2-认知负担-cognitive-work" class="headerlink" title="2.认知负担 cognitive work"></a>2.认知负担 cognitive work</h4><p>•    需要理解不熟悉的概念和模式<br>•    需要理解冗长、生涩的文本内容<br>•    需要理解混乱的结构和布局<br>•    需要理解模棱两可的操作<br>•    需要猜测系统状态、行为、结果</p><h4 id="3-记忆负担-memory-work"><a href="#3-记忆负担-memory-work" class="headerlink" title="3.记忆负担 memory work"></a>3.记忆负担 memory work</h4><p>•    需要记住对象的各种属性（名字、位置、大小、颜色）<br>•    需要记住对象的关联<br>•    需要记住操作的命令、步骤、结果<br>•    需要记住以往的操作</p><h4 id="4-物理负担-physical-work"><a href="#4-物理负担-physical-work" class="headerlink" title="4.物理负担 physical work"></a>4.物理负担 physical work</h4><p>•    需要长距离移动鼠标<br>•    需要进行（多次）点击<br>•    需要执行不同的鼠标手势<br>•    需要多种操作组合<br>•    需要切换输入模式<br>•    需要进出不同的页面&#x2F;区域<br>•    需要长时间等待</p><h3 id="二、优化目标-Goal"><a href="#二、优化目标-Goal" class="headerlink" title="二、优化目标 (Goal)"></a>二、优化目标 (Goal)</h3><p>仔细检查已有的设计，或多或少总是能发现问题。在解决问题之前，我们应该清楚要往什么方向进行优化：</p><h4 id="1-基于可用性的目标"><a href="#1-基于可用性的目标" class="headerlink" title="1.基于可用性的目标"></a>1.基于可用性的目标</h4><h5 id="•-易于识别-x2F-定位-x2F-阅读"><a href="#•-易于识别-x2F-定位-x2F-阅读" class="headerlink" title="•    易于识别&#x2F;定位&#x2F;阅读"></a>•    易于识别&#x2F;定位&#x2F;阅读</h5><h5 id="•-易于理解-x2F-学习-x2F-记忆"><a href="#•-易于理解-x2F-学习-x2F-记忆" class="headerlink" title="•    易于理解&#x2F;学习&#x2F;记忆"></a>•    易于理解&#x2F;学习&#x2F;记忆</h5><h5 id="•-易于操作"><a href="#•-易于操作" class="headerlink" title="•    易于操作"></a>•    易于操作</h5><p>优化的最重要的目的，是让产品更好用，使设计符合Jakob Nielsen的十条可用性准则：</p><ul><li>1.状态可见原则（Visibility of system status ）：系统应该让用户时刻清楚当前发生了什么事情，也就是快速的让用户了解自己处于何种状态、对过去发生、当前目标、以及对未来去向有所了解，一般的方法是在合适的时间给用户适当的反馈，防止用户使用出现错误。</li><li>2.环境贴切原则（Match between system and the real world）软件系统应该使用用户熟悉的语言、文字、语句，或者其他用户熟悉的概念，而非系统语言。软件中的信息应该尽量贴近真实世界，让信息更自然，逻辑上也更容易被用户理解。</li><li>3.用户可控原则（User control and freedom）：用户常常会误触到某些功能，我们应该让用户可以方便的退出。这种情况下，我们应该把“紧急出口”按钮做的明显一点，而且不要在退出时弹出额外的对话框。很多用户发送一条消息、总会有他忽然意识到自己不对的地方，这个叫做临界效应</li><li>4.一致性原则（Consistency and standards）：对于用户来说，同样的文字、状态、按钮，都应该触发相同的事情，遵从通用的平台惯例；也就是，同一用语、功能、操作保持一致。软件产品的一致性包括以下五个方面：<ul><li>结构一致性：保持一种类似的结构，新的结构变化会让用户思考，规则的排列顺序能减轻用户的思考负担；</li><li>色彩一致性：产品所使用的主要色调应该是统一的，而不是换一个页面颜色就不同；</li><li>操作一致性：能让产品更新换代时仍然让用户保持对原产品的认知，减小用户的学习成本；</li><li>反馈一致性：用户在操作按钮或者条目的时候，点击的反馈效果应该是一致的；</li><li>文字一致性：产品中呈现给用户阅读的文字大小、样式、颜色、布局等都应该是一致的；</li></ul></li><li>5.错原则（Error prevention）：比一个优秀错误提醒弹窗更好的设计方式，是在这个错误发生之前就避免它。可以帮助用户排除一些容易出错的情况，或在用户提交之前给他一个确认的选项。在此，特别要注意在用户操作具有毁灭性效果的功能时要有提示，防止用户犯不可挽回的错误。</li><li>6.易取原则（Recognition rather than recall）：通过把组件、按钮及选项可见化，来降低用户的记忆负荷。用户不需要记住各个对话框中的信息。软件的使用指南应该是可见的，且在合适的时候可以再次查看。</li><li>7.灵活高效原则（Flexibility and efficiency of use）：汽车油门—新手用户常常看不见，而且对于高手来说可以通过它快速与汽车互动。这样的系统可以同时满足有经验和无经验的用户。允许用户定制常用功能。</li><li>8.优美且简约原则（Aesthetic and minimalist design）：对话中的内容应该去除不相关的信息或几乎不需要的信息。任何不相关的信息都会让原本重要的信息更难被用户察觉。</li><li>9.容错原则（Help users recognize, diagnose, and recover from errors）：错误信息应该使用简洁的文字（不要用代码），指出错误是什么，并给出解决建议。也就是在用户出错时如何为出错的用户提供及时正确的帮助呢？即要帮助用户识别出错误，分析出错误的原因再帮助用户回到正确的道路上。如果真的不能帮助用户从错误中恢复，也要尽量为用户提供帮助让用户损失降到最低。</li><li>10.人性化帮助原则（Help and documentation）：即使系统不适用帮助文档是最好的，但我们也应该提供一份帮助文档。任何帮助信息都应该可以方便地搜索到，以用户的任务为核心，列出相应的步骤，但文字不要太多。</li></ul><h4 id="2-基于业务目标"><a href="#2-基于业务目标" class="headerlink" title="2.基于业务目标"></a>2.基于业务目标</h4><p>需要根据不同产品业务需求进行定义。例如，AARRR，盈利指标等，对于快速注册流程的优化，目的是让用户用最方便完成注册进入目标页面，优化目标可能是最小化输入、最短等待时间等。</p><h3 id="三、快速检查清单-Check-list"><a href="#三、快速检查清单-Check-list" class="headerlink" title="三、快速检查清单 (Check list)"></a>三、快速检查清单 (Check list)</h3><p>为了达到优化的目标，整理了一个简易的checklist（pdf版本下载链接请见文末），方便在走查时对架构、布局、内容、行为四个方面对照检查：</p><h4 id="1-架构和导航Architecture-and-navigation"><a href="#1-架构和导航Architecture-and-navigation" class="headerlink" title="1.架构和导航Architecture and navigation"></a>1.架构和导航Architecture and navigation</h4><ul><li><input disabled="" type="checkbox">   是否采用了用户熟悉或容易理解的结构？</li><li><input disabled="" type="checkbox">   是否能识别当前在网站中的位置？</li><li><input disabled="" type="checkbox">   是否能清晰表达页面之间的结构？</li><li><input disabled="" type="checkbox">   是否能快速回到首页&#x2F;主要页面？</li><li><input disabled="" type="checkbox">   链接名称与页面名称是否相对应？</li><li><input disabled="" type="checkbox">   当前页面的结构和布局是否清晰？</li></ul><h4 id="2-布局和设计Layout-and-design"><a href="#2-布局和设计Layout-and-design" class="headerlink" title="2.布局和设计Layout and design"></a>2.布局和设计Layout and design</h4><ul><li><input disabled="" type="checkbox">   是否采用了用户熟悉的界面元素和控件？</li><li><input disabled="" type="checkbox">   界面元素和控件的文字、位置、布局、分组、大小、颜色、形状等是否合理、容易识别、一致？</li><li><input disabled="" type="checkbox">   界面元素&#x2F;控件之间的关系是否表达正确？</li><li><input disabled="" type="checkbox">   主要操作&#x2F;阅读区域的视线是否流畅？</li><li><input disabled="" type="checkbox">   其他文本（称谓、提示语、提供反馈）是否一致？</li></ul><h4 id="3-内容和可读性Content-and-readability"><a href="#3-内容和可读性Content-and-readability" class="headerlink" title="3.内容和可读性Content and readability"></a>3.内容和可读性Content and readability</h4><ul><li><input disabled="" type="checkbox">   文字内容的交流对象是用户吗？</li><li><input disabled="" type="checkbox">   语言是否简洁、易懂、礼貌？</li><li><input disabled="" type="checkbox">   内容表达的含义是否一致？</li><li><input disabled="" type="checkbox">   重要内容是否处于显著位置？</li><li><input disabled="" type="checkbox">   是否在需要时提供必要的信息？</li><li><input disabled="" type="checkbox">   是否有干扰视线和注意力的元素？</li></ul><h4 id="4-行为和互动Behavior-and-interaction"><a href="#4-行为和互动Behavior-and-interaction" class="headerlink" title="4.行为和互动Behavior and interaction"></a>4.行为和互动Behavior and interaction</h4><ul><li><input disabled="" type="checkbox">   是否告知、引导用户可以做什么？</li><li><input disabled="" type="checkbox">   是否告知需要进行哪些步骤？</li><li><input disabled="" type="checkbox">   是否告知需要多少时间完成？</li><li><input disabled="" type="checkbox">   是否告知第一步做什么？</li><li><input disabled="" type="checkbox">   是否告知输入&#x2F;操作限制？</li><li><input disabled="" type="checkbox">   是否有必要的系统&#x2F;用户行为反馈？</li><li><input disabled="" type="checkbox">   是否允许必要的撤销操作？</li><li><input disabled="" type="checkbox">   是否页面上所有操作都必须由用户完成？</li><li><input disabled="" type="checkbox">   是否已将操作步骤、点击次数减至最少？</li><li><input disabled="" type="checkbox">   是否所有跳转都是必须的（无法在当前页面呈现）？</li></ul><p>以上只是一个不完全的清单，同学们可以根据自己的实践经验修改，也可以参考更全面、权威的可用性测试检查表，如<a href="http://oldwww.acm.org/perlman/question.cgi?form=PUTQ">普渡大学可用性测试检查列表</a>。</p><table><thead><tr><th align="left">1</th><th align="left">总的来说，我对使用这个系统的容易程度感到满意</th><th align="left">strongly disagree</th><th align="left"></th><th align="left">strongly agree</th><th align="left"></th></tr></thead><tbody><tr><td align="left">2</td><td align="left">使用这个系统很简单</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">3</td><td align="left">我可以有效地完成我的工作使用这个系统</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">4</td><td align="left">使用这个系统，我可以很快地完成我的工作</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">5</td><td align="left">我能够有效地完成我的工作使用这个系统</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">6</td><td align="left">我觉得使用这个系统很舒服</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">7</td><td align="left">学会使用这个系统很容易</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">8</td><td align="left">学会使用这个系统很容易</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">9</td><td align="left">The system gives error messages that clearly tell me how to fix problems</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">10</td><td align="left">Whenever I make a mistake using the system, I recover easily and quickly</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">11</td><td align="left">The information (such as online help, on-screen messages, and other documentation) provided with this system is clear</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">12</td><td align="left">It is easy to find the information I needed</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">13</td><td align="left">The information provided for the system is easy to understand</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">14</td><td align="left">The information is effective in helping me complete the tasks and scenarios</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">15</td><td align="left">The organization of information on the system screens is clear</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">16</td><td align="left">The interface of this system is pleasant</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">17</td><td align="left">I like using the interface of this system</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">18</td><td align="left">This system has all the functions and capabilities I expect it to have</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr><tr><td align="left">19</td><td align="left">总的来说，我对这个系统很满意</td><td align="left">strongly disagree</td><td align="left"></td><td align="left">strongly agree</td><td align="left"></td></tr></tbody></table><h3 id="四、确定优先级-Priority"><a href="#四、确定优先级-Priority" class="headerlink" title="四、确定优先级 (Priority)"></a>四、确定优先级 (Priority)</h3><p>当我们通过checklist将需要优化的问题筛选出来以后，可以根据问题的严重性和解决的问题的成本（时间、人力等）来综合考虑问题的优先级，例如，问题严重性得分高而且优化成本低的问题，应该优先解决。</p><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><h5 id="Considerations：为降低用户的视觉负担、认知负担、记忆负担以及物理负担而优化设计"><a href="#Considerations：为降低用户的视觉负担、认知负担、记忆负担以及物理负担而优化设计" class="headerlink" title="Considerations：为降低用户的视觉负担、认知负担、记忆负担以及物理负担而优化设计"></a>Considerations：为降低用户的视觉负担、认知负担、记忆负担以及物理负担而优化设计</h5><h5 id="Goal：使设计易于识别-x2F-定位-x2F-阅读，易于理解-x2F-学习-x2F-记忆，易于操作，符合可用性原则和产品目标"><a href="#Goal：使设计易于识别-x2F-定位-x2F-阅读，易于理解-x2F-学习-x2F-记忆，易于操作，符合可用性原则和产品目标" class="headerlink" title="Goal：使设计易于识别&#x2F;定位&#x2F;阅读，易于理解&#x2F;学习&#x2F;记忆，易于操作，符合可用性原则和产品目标"></a>Goal：使设计易于识别&#x2F;定位&#x2F;阅读，易于理解&#x2F;学习&#x2F;记忆，易于操作，符合可用性原则和产品目标</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;“优化已有产品的体验”，这是用户体验相关岗位职责中常见的描述。我们的产品常常是在快速的迭代过程中不断完善的，就像孩子生下来需要养育才能长大一样，优化已有功能&amp;#x2F;产品，和设计新功能&amp;#x2F;产品同样重要，不可偏废。&lt;br&gt;但是，相比实现新功能，已有功能的优化总是显得</summary>
      
    
    
    
    <category term="优化" scheme="https://blog.gadfly.vip/categories/%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="优化" scheme="https://blog.gadfly.vip/tags/%E4%BC%98%E5%8C%96/"/>
    
    <category term="测试" scheme="https://blog.gadfly.vip/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="体验" scheme="https://blog.gadfly.vip/tags/%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>一些笔记</title>
    <link href="https://blog.gadfly.vip/2019/07/some-notes/"/>
    <id>https://blog.gadfly.vip/2019/07/some-notes/</id>
    <published>2019-07-03T07:06:05.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="1、从远程主机克隆一个版本库"><a href="#1、从远程主机克隆一个版本库" class="headerlink" title="1、从远程主机克隆一个版本库"></a>1、从远程主机克隆一个版本库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>版本库的网址<span class="token operator">></span> <span class="token operator">&lt;</span>本地目录名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone -o jQuery https://github.com/jquery/jquery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、管理远程主机名"><a href="#2、管理远程主机名" class="headerlink" title="2、管理远程主机名"></a>2、管理远程主机名</h3><p>使用-v选项，可以参看远程主机的网址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git remote show命令加上主机名，可以查看该主机的详细信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote show <span class="token operator">&lt;</span>主机名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git remote add命令用于添加远程主机。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>主机名<span class="token operator">></span> <span class="token operator">&lt;</span>网址<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git remote rm命令用于删除远程主机。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rm</span> <span class="token operator">&lt;</span>主机名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git remote rename命令用于远程主机的改名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rename</span> <span class="token operator">&lt;</span>原主机名<span class="token operator">></span> <span class="token operator">&lt;</span>新主机名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、取回commit"><a href="#3、取回commit" class="headerlink" title="3、取回commit"></a>3、取回commit</h3><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令将某个远程主机的更新，全部取回本地。<br>git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。<br>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>分支名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所取回的更新，在本地主机上要用”远程主机名&#x2F;分支名”的形式读取。比如origin主机的master，就要用origin&#x2F;master读取。<br>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch -r  origin/master$ <span class="token function">git</span> branch -a  * master  remotes/origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面命令表示，本地主机的当前分支是master，远程分支是origin&#x2F;master。<br>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b newBrach origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令表示，在origin&#x2F;master的基础上，创建一个新分支。<br>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> merge origin/master<span class="token comment"># 或者</span>$ <span class="token function">git</span> rebase origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面命令表示在当前分支上，合并origin&#x2F;master。</p><h3 id="4、取回远程主机某个分支的更新，再与本地的指定分支合并"><a href="#4、取回远程主机某个分支的更新，再与本地的指定分支合并" class="headerlink" title="4、取回远程主机某个分支的更新，再与本地的指定分支合并"></a>4、取回远程主机某个分支的更新，再与本地的指定分支合并</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin next:master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令表示，取回origin&#x2F;next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch origin<span class="token function">git</span> merge origin/next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin&#x2F;master分支。<br>Git也允许手动建立追踪关系。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream master origin/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令指定master分支追踪origin&#x2F;next分支。<br>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。<br>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。<br>如果合并需要采用rebase模式，可以使用–rebase选项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull --rebase <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。<br>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pull -p<span class="token comment"># 等同于下面的命令</span>$ <span class="token function">git</span> fetch --prune origin$ <span class="token function">git</span> fetch -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、将本地分支的更新，推送到远程主机"><a href="#5、将本地分支的更新，推送到远程主机" class="headerlink" title="5、将本地分支的更新，推送到远程主机"></a>5、将本地分支的更新，推送到远程主机</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>本地分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>远程分支名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。<br>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。<br>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin :master<span class="token comment"># 等同于</span>$ <span class="token function">git</span> push origin --delete master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面命令表示删除origin主机的master分支。<br>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令表示，将当前分支推送到origin主机的对应分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">如果当前分支只有一个追踪分支，那么主机名都可以省略。$ <span class="token function">git</span> push如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。$ <span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git <span class="token number">2.0</span>版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。$ <span class="token function">git</span> config --global push.default matching<span class="token comment"># 或者</span>$ <span class="token function">git</span> config --global push.default simple还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。$ <span class="token function">git</span> push --all origin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面命令表示，将所有本地分支都推送到origin主机。<br>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push --force origin <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。<br>最后，git push不会推送标签（tag），除非使用–tags选项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="替换字体"><a href="#替换字体" class="headerlink" title="替换字体"></a>替换字体</h2><p><a href="https://github.com/ysc3839/FontMod/">https://github.com/ysc3839/FontMod/</a> 可以用于替换部分Qt或使用GDI渲染的程序的默认字体。<br>Mactype可以用于改善win10字体渲染。与virtual box和上面的fontmod会产生冲突。<br>Mactype以注册表加载需要在bios中关闭secure boot，Surface进入的方法是关机状态下按住<code>音量+</code>，然后按一下<code>电源键</code>，等到出现surface的logo后再松开<code>音量+</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;h3 id=&quot;1、从远程主机克隆一个版本库&quot;&gt;&lt;a href=&quot;#1、从远程主机克隆一个版本库&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="随笔" scheme="https://blog.gadfly.vip/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="笔记" scheme="https://blog.gadfly.vip/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="随笔" scheme="https://blog.gadfly.vip/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="记事" scheme="https://blog.gadfly.vip/tags/%E8%AE%B0%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于校园一卡通的初探索</title>
    <link href="https://blog.gadfly.vip/2019/05/campus-card-research/"/>
    <id>https://blog.gadfly.vip/2019/05/campus-card-research/</id>
    <published>2019-05-07T15:10:57.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>校园一卡通涵盖了我们校园生活中的方方面面，吃饭喝水购物门禁都靠它，对于其工作方式我非常感兴趣，因此做了这次的探索。<br>In the world of locked rooms, the man with the key is king.<br>– Moriarty</p></blockquote><span id="more"></span><h3 id="0×00-写在前面"><a href="#0×00-写在前面" class="headerlink" title="0×00 写在前面"></a>0×00 写在前面</h3><h4 id="本文中提到的所有技术仅供学习研究作参考，请勿将其用于非法用途"><a href="#本文中提到的所有技术仅供学习研究作参考，请勿将其用于非法用途" class="headerlink" title="本文中提到的所有技术仅供学习研究作参考，请勿将其用于非法用途"></a>本文中提到的所有技术仅供学习研究作参考，<strong>请勿将其用于非法用途</strong></h4><h3 id="0x01-设备"><a href="#0x01-设备" class="headerlink" title="0x01 设备"></a>0x01 设备</h3><ul><li>proxmark3</li><li>空白UID卡（或其他可以随意写入的13.56MHz高频ISO14443a卡）</li><li>一台可以使用NFC功能的安卓手机（非必需）</li><li>一颗爱折腾的心<br><img src="/images/227387.gif" data-original="/images/posts/2019/05/PM3.jpg"></li></ul><h3 id="0x02-一些基础概念"><a href="#0x02-一些基础概念" class="headerlink" title="0x02 一些基础概念"></a>0x02 一些基础概念</h3><h4 id="proxmark3"><a href="#proxmark3" class="headerlink" title="proxmark3"></a>proxmark3</h4><p>Proxmark3是由Jonathan Westhues在做硕士论文中研究Mifare Classic时设计、开发的一款开源硬件，可以用于RFID中嗅探、读取以及克隆等相关操作，如：PM3可以在水卡、公交卡、门禁卡等一系列RFID\NFC卡片和与其相对应的机器读取、数据交换的时候进行嗅探攻击，并利用嗅探到的数据通过XOR校验工具把扇区的密钥计算出来，当然PM3也能用于破解门禁实施物理入侵。</p><h4 id="M1卡"><a href="#M1卡" class="headerlink" title="M1卡"></a>M1卡</h4><p>所谓的M1芯片，是指菲利浦下属子公司恩智浦出品的芯片缩写，全称为NXP Mifare1系列，常用的有S50及S70两种型号，复旦FM1108、AT24C64、AT24C04等芯片与其兼容，利用PVC封装M1芯片、感应天线，然后压制成型后而制作的卡即是智能卡行业所说的M1卡，属于非接触式IC卡。M1卡的优点是可读写、有16个独立的可加密扇区，可应用于16个不同的系统，能够轻易实现一卡多用，多个系统一卡通用。</p><h4 id="RFID与NFC"><a href="#RFID与NFC" class="headerlink" title="RFID与NFC"></a>RFID与NFC</h4><p>NFC是在RFID的基础上发展而来，NFC从本质上与RFID没有太大区别，都是基于地理位置相近的两个物体之间的信号传输。但NFC与RFID还是有区别的，NFC技术增加了点对点通信功能，可以快速建立蓝牙设备之间的P2P（点对点）无线通信，NFC设备彼此寻找对方并建立通信连接。P2P通信的双方设备是对等的，而RFID通信的双方设备是主从关系。NFC相较于RFID技术，具有距离近、带宽高、能耗低等一些特点。NFC只是限于13.56MHz的频段，而RFID的频段有低频（125KHz到135KHz），高频（13.56MHz）和超高频（860MHz到960MHz）之间。NFC工作有效距离小于10cm，所以具有很高的安全性，RFID工作有效距离从几米到几十米都有。因为同样工作于13.56MHz，NFC与现有非接触智能卡技术兼容，所以很多的厂商和相关团体都支持NFC，而RFID标准较多，统一较为复杂（估计是没可能统一的了），只能在特殊行业有特殊需求下，采用相应的技术标准。RFID更多的被应用在生产、物流、跟踪、资产管理上，而NFC则在门禁、公交、手机支付等领域内发挥着巨大的作用。</p><h4 id="CPU卡"><a href="#CPU卡" class="headerlink" title="CPU卡"></a>CPU卡</h4><p>也称智能卡，卡内的集成电路中带有微处理器CPU、存储单元（包括随机存储器RAM、程序存储器ROM（FLASH）、用户数据存储器EEPROM）以及芯片操作系统COS（Chip Operating System）。装有COS的CPU卡相当于一台微型计算机，不仅具有数据存储功能，同时具有命令处理和数据安全保护等功能。</p><h3 id="0x03-还是直接上手吧"><a href="#0x03-还是直接上手吧" class="headerlink" title="0x03 还是直接上手吧"></a>0x03 还是直接上手吧</h3><p>上面复制粘贴了一堆我差点没看懂的基本概念，似乎也没太大用处，只是希望大家能大概明白这些非接触IC卡的工作原理和大致种类23333。下面我来讲讲我是怎么做这次的探索的。<br>探索这种对我来说全新的领域自然是要吃点亏的，比如最早的时候我买了台没什么用的ACR122u，结果发现这东西对于CPU卡（也就是我们平常生活中使用的大部分非接触式IC卡）并没有什么作用。因为虽然这些卡都兼容MIFARE，但是采用了许多新技术来保障其中的安全，ACR122u针对的只有那些简单的M1卡。所以那台机器被我卖给了某不知名学长去玩23333。<br>查阅了一些资料后，我对这些东西有了初步的概念，在某UCLA的学长的建议下，我买了台proxmark3来继续探索。proxmark3本质上是一款单片机，可以实现非常多的功能。这玩意在某宝上有很多祖国版。祖国版与原版的区别主要是阉割了一部分电路，但是优化了天线的使用与安装方式，售价200-600不等，个人建议选择200左右的就够了，毕竟我们只需要简单研究，而不是拿去搞黑产（雾。用proxmark3之后我收集到了许多有意思的信息。执行<code>hf 14a reader</code>之后，就可以读取到卡片的UID（相当于卡号）、ATQA、SAK、TYPE（卡类型）、ATS等。UID一般用于确认卡的身份，正常情况下是一卡一号，很多门禁系统（比如我们学校）就依靠这个来进行门禁的识别，不过也有些严格的门禁不仅要求UID，还会对整张卡的其他信息有要求（比如上海大学）。然后我用手边的几张卡试了试，发现银行卡、上海公交卡、我的校园卡的卡类型都是<code>JCOP31 or JCOP41 v2.3.1</code>，也就是说都是CPU卡，很可能我的校园卡和交通卡一样采用了滚动码加密，难以破解。</p><blockquote><p>之前基础概念里有提到，M1卡或者兼容它的卡中有16个扇区（0-15），每个扇区中有四个块，也就是有64个块（0-63）。每个扇区都可以分别被不同的密钥所加密，每个扇区有两个密钥，分为keyA和keyB，这两个密钥分别长12个字节，密钥内容可以由任意可重复的12个十六进制数字（0-F）组成，keyA在每个扇区第四个块的前12位，keyB在后12位，中间8位则是控制字。key的验证是在卡内部进行的，读写器只负责给卡提供电并和卡通讯，读写器发送加密的密码到卡，卡内部进行解密验证并发返回值，读写器根据卡的返回值来判断验证是否通过。每个区中的控制字决定验证密码通过后能进行的操作。如果控制字中已将某区锁死，即使密码验证通过也读写不了卡中的数据。默认的控制字数据是无论那个密码验证通过，都可读写区中的数据，keyA是永远不可读的，keyB在默认控制字的情况下可以读，条件是密码必须验证通过。<br><img src="/images/227387.gif" data-original="/images/posts/2019/05/blocks_sheet.jpg"><br>而这里提到的滚动码加密则是key并不固定，在每次读写后，通过卡内的计数器和与读卡器中保存的相同的特定的加密算法来计算出新的key，从而保证key无法被简单破解，即使侥幸破解后，key也只有一次使用的机会，大大增加了卡本身的安全性，这项技术在公交卡之类的离线储值卡上应用广泛。</p></blockquote><h3 id="0x04-一点挫折"><a href="#0x04-一点挫折" class="headerlink" title="0x04 一点挫折"></a>0x04 一点挫折</h3><p>这时某UCLA的学长还介绍给了我一个很有趣的APP，叫<code>Mifare Classic Tool</code>，Google play地址在这里：<a href="https://play.google.com/store/apps/details?id=de.syss.MifareClassicTool">https://play.google.com/store/apps/details?id=de.syss.MifareClassicTool</a>，Github项目地址在这里：<a href="https://github.com/ikarus23/MifareClassicTool">https://github.com/ikarus23/MifareClassicTool</a>。这个可以在有NFC功能的手机上读写兼容MIFARE的卡，我用它读了一下校园卡，发现1-6扇区被加密无法读取，7-15扇区则都是默认密钥<code>FFFFFFFFFFFF</code>，0扇区的keyA为<code>010203040506</code>，keyB没有显示，应该是卡片不允许读取。<br><img src="/images/227387.gif" data-original="/images/posts/2019/05/MCT_results.jpg"><br>用手机能做到的也只有这些了，于是我继续使用proxmark3研究。pm3的GUI软件中有一些自带的破解选项，比如PRNG破解<code>hf mf mifare</code>，可以利用MIFARE卡中存在的漏洞来获取某些特定的密码。但是令我意外的是，我没能获取到任何数据。我以为它是不存在这样的漏洞，于是试图使用嗅探功能来获取，却也失败了。这时那位神秘的UCLA学长提醒我是不是固件问题。于是我注意到，某宝上便宜的PM3使用的都是所谓2.0版本的固件，而500+的都是4.0。考虑到这是一款开源硬件，于是我去它的github仓库里找到了固件源码自行编译，并编译了新版本的命令行工具，果然获得了不同的结果。这时再使用PRNG破解，就成功得到了0扇区keyA为<code>010203040506</code>（等等，怎么有一种什么都没做的感觉？？？）。<br>事实上，除了PRNG之外，还有一个操作叫<code>知一求全``hf mf nested [1-4 也就是1k卡还是其他的什么卡] [第几扇区，从0开始] [A还是B] [key] d</code>，同样是利用MIFARE卡的漏洞来根据某个密钥计算出其他的密钥。执行之后，我成功得到了我的校园卡的全部密钥。又找了其他同学的卡测试之后发现，这张校园卡并没有什么特殊的加密方式，虽然使用的是比较先进的CPU卡，但却只把它当成普通的M1卡来记录数据。所有卡的0扇区keyA都是<code>010203040506</code>，1-6扇区的keyA应该是根据UID计算的一个key，0-6扇区的keyB则是另一个。<br>分析里面的数据之后发现，0扇区的1块记录了学号，2扇区的8-9块记录了完整的学生姓名和身份证号，5扇区负责洗澡的水费，13扇区则是负责宿舍区净水器喝水的水费。下图是某同学的校园卡读取后的部分数据，为了保障当事人隐私，部分数据已打码。<br><img src="/images/227387.gif" data-original="/images/posts/2019/05/dump_data.jpg"></p><h3 id="0x05-后记"><a href="#0x05-后记" class="headerlink" title="0x05 后记"></a>0x05 后记</h3><p>折腾真是件愉快的事情啊，不过总算还是搞出了点东西。最后的最后，本文仅作学习交流之参考，<strong>请绝对不要用这里提到的技术去做违法之事！！！</strong></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;校园一卡通涵盖了我们校园生活中的方方面面，吃饭喝水购物门禁都靠它，对于其工作方式我非常感兴趣，因此做了这次的探索。&lt;br&gt;In the world of locked rooms, the man with the key is king.&lt;br&gt;– Moriarty&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="RFID" scheme="https://blog.gadfly.vip/categories/RFID/"/>
    
    
    <category term="单片机" scheme="https://blog.gadfly.vip/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="RFID" scheme="https://blog.gadfly.vip/tags/RFID/"/>
    
    <category term="PROXMARK3" scheme="https://blog.gadfly.vip/tags/PROXMARK3/"/>
    
    <category term="校园卡" scheme="https://blog.gadfly.vip/tags/%E6%A0%A1%E5%9B%AD%E5%8D%A1/"/>
    
    <category term="NFC" scheme="https://blog.gadfly.vip/tags/NFC/"/>
    
    <category term="一卡通" scheme="https://blog.gadfly.vip/tags/%E4%B8%80%E5%8D%A1%E9%80%9A/"/>
    
    <category term="数据分析" scheme="https://blog.gadfly.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>双显卡切换？独显输出核显渲染？</title>
    <link href="https://blog.gadfly.vip/2018/07/dual-gpu-switch/"/>
    <id>https://blog.gadfly.vip/2018/07/dual-gpu-switch/</id>
    <published>2018-07-31T02:09:53.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>用台式机时，Intel用户可能会发现一件很尴尬的事情，那就是CPU里的核显在使用独显时几乎没有用。那么有什么办法可以让核显来替独显分担，降低功耗呢？<br>要达到这样的目的，我们需要先在BIOS里让核显运行。在我的微星主板的BIOS里就是<code>内建显示配置</code>-&gt;<code>集成显卡多显示器</code>-&gt;<code>允许</code>即可。<br>然后在Windows中，打开 <a href="https://downloadcenter.intel.com/zh-cn/product/80939/-">https://downloadcenter.intel.com/zh-cn/product/80939/-</a> ，在里面下载对应CPU的驱动。<br>接着，在桌面右键-&gt;<code>显示设置</code>-&gt;<code>图形设置</code>-&gt;<code>浏览</code>，选择你需要用核显运行的程序，点击<code>选项</code>，选择节能。通过这样的操作之后，我们就可以指定特定的程序通过核显运行，也能在OBS中使用Intel QuickSync编码器来进行编码，极大提升硬件资源利用率。<br>详见视频： <a href="https://www.bilibili.com/video/av28150115/">https://www.bilibili.com/video/av28150115/</a></p><iframe src="//player.bilibili.com/player.html?aid=28150115&cid=48650182&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="100%"> </iframe><p><img src="/images/227387.gif" data-original="/images/posts/2018/07/psb.gif" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用台式机时，Intel用户可能会发现一件很尴尬的事情，那就是CPU里的核显在使用独显时几乎没有用。那么有什么办法可以让核显来替独显分担，降低功耗呢？&lt;br&gt;要达到这样的目的，我们需要先在BIOS里让核显运行。在我的微星主板的BIOS里就是&lt;code&gt;内建显示配置&lt;/code</summary>
      
    
    
    
    <category term="电脑" scheme="https://blog.gadfly.vip/categories/%E7%94%B5%E8%84%91/"/>
    
    
    <category term="显卡" scheme="https://blog.gadfly.vip/tags/%E6%98%BE%E5%8D%A1/"/>
    
    <category term="独显" scheme="https://blog.gadfly.vip/tags/%E7%8B%AC%E6%98%BE/"/>
    
    <category term="核显" scheme="https://blog.gadfly.vip/tags/%E6%A0%B8%E6%98%BE/"/>
    
    <category term="切换" scheme="https://blog.gadfly.vip/tags/%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>在首页隐藏文章</title>
    <link href="https://blog.gadfly.vip/2018/05/hide-article-at-index/"/>
    <id>https://blog.gadfly.vip/2018/05/hide-article-at-index/</id>
    <published>2018-05-20T13:57:55.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<p>你看不见我！看不见我！略略略</p><span id="more"></span><p>最近开始在博客上写日记，我希望它们可以在首页不显示，但是在归档里还能找到，研究了几篇文章之后，我做了如下改动：<br>index.ejs中</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- Normal Post --></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> page<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> hasposttop <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>visible <span class="token operator">===</span> <span class="token string">'hide'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>scheme <span class="token operator">===</span> <span class="token string">'Paradox'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token comment">&lt;!-- Paradox Thumbnail --></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/Paradox-post_entry'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> post<span class="token operator">:</span> post<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> pin<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>scheme <span class="token operator">===</span> <span class="token string">'Isolation'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token comment">&lt;!-- Isolation Thumbnail --></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/Isolation-post_entry'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> post<span class="token operator">:</span> post<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> pin<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post_entry-module mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-color-text--grey-600 mdl-card__supporting-text fade out<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-indent</span><span class="token punctuation">:</span> 1.5em</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>这里有一篇文章藏起来了哟！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>else后面的部分用来表示这里少了一篇文章，以免发生因为连发了十篇隐藏文章，而导致首页空白的情况。<br>post.md中</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> date <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> posthide_post_info<span class="token punctuation">:</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>visible属性只有在为<code>hide</code>的时候才会使文章在首页不可见，其他时候均为可见状态。<br>参考资料：1、<a href="https://github.com/bollnh/hexo-theme-material/issues/483">https://github.com/bollnh/hexo-theme-material/issues/483</a><br>　　　　　2、<a href="https://forwardkth.github.io/2016/05/08/next-theme-post-visibility/">https://forwardkth.github.io/2016/05/08/next-theme-post-visibility/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;你看不见我！看不见我！略略略&lt;/p&gt;</summary>
    
    
    
    <category term="建站" scheme="https://blog.gadfly.vip/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="Hexo" scheme="https://blog.gadfly.vip/tags/Hexo/"/>
    
    <category term="HTML" scheme="https://blog.gadfly.vip/tags/HTML/"/>
    
    <category term="EJS" scheme="https://blog.gadfly.vip/tags/EJS/"/>
    
  </entry>
  
  <entry>
    <title>记录一下对模板和hexo做过的改动</title>
    <link href="https://blog.gadfly.vip/2018/05/template-changes/"/>
    <id>https://blog.gadfly.vip/2018/05/template-changes/</id>
    <published>2018-05-17T16:04:46.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在.&#x2F;themes&#x2F;material&#x2F;layout&#x2F;layout.ejs的<code>&lt;body&gt;</code>中加入</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tinyball-canvas<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span>-99<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>你这是什么垃圾浏览器，这都不能显示(╯‵□′)╯︵┻━┻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">jsLsload</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token punctuation">(</span><span class="token string">'js/tiniballs.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">:</span><span class="token string">'tiniballs_js'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>tiniballs.js存放于.&#x2F;themes&#x2F;material&#x2F;source&#x2F;js&#x2F;中，内容如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">WIDTH</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> <span class="token constant">HEIGHT</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span> <span class="token constant">POINT</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'tinyball-canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">WIDTH</span> <span class="token operator">=</span> canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span><span class="token constant">HEIGHT</span> <span class="token operator">=</span> canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span><span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">'rgba(0,0,0,0.02)'</span><span class="token punctuation">,</span>    context<span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'rgba(0,0,0,0.05)'</span><span class="token punctuation">;</span><span class="token keyword">var</span> circleArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Line</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> _x<span class="token punctuation">,</span> _y<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>beginX <span class="token operator">=</span> x<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beginY <span class="token operator">=</span> y<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>closeX <span class="token operator">=</span> _x<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>closeY <span class="token operator">=</span> _y<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o <span class="token operator">=</span> o<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> r<span class="token punctuation">,</span> moveX<span class="token punctuation">,</span> moveY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>moveX <span class="token operator">=</span> moveX<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>moveY <span class="token operator">=</span> moveY<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token parameter">max<span class="token punctuation">,</span> _min</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> min <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">drawCricle</span><span class="token punctuation">(</span><span class="token parameter">cxt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> r<span class="token punctuation">,</span> moveX<span class="token punctuation">,</span> moveY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> r<span class="token punctuation">,</span> moveX<span class="token punctuation">,</span> moveY<span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>x<span class="token punctuation">,</span> circle<span class="token punctuation">.</span>y<span class="token punctuation">,</span> circle<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> circle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token parameter">cxt<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> _x<span class="token punctuation">,</span> _y<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> line <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Line</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> _x<span class="token punctuation">,</span> _y<span class="token punctuation">,</span> o<span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">'rgba(0,0,0,'</span> <span class="token operator">+</span> o <span class="token operator">+</span> <span class="token string">')'</span>    cxt<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>beginX<span class="token punctuation">,</span> line<span class="token punctuation">.</span>beginY<span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>closeX<span class="token punctuation">,</span> line<span class="token punctuation">.</span>closeY<span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cxt<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    circleArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">POINT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        circleArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">drawCricle</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token constant">WIDTH</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token constant">HEIGHT</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">POINT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">POINT</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">&lt;</span> <span class="token constant">POINT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> <span class="token constant">A</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>circleArr<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> circleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token constant">B</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>circleArr<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> circleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> lineLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">*</span> <span class="token constant">A</span> <span class="token operator">+</span> <span class="token constant">B</span> <span class="token operator">*</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> lineLength <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">-</span> <span class="token number">0.009</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> lineOpacity <span class="token operator">=</span> <span class="token constant">C</span> <span class="token operator">></span> <span class="token number">0.03</span> <span class="token operator">?</span> <span class="token number">0.03</span> <span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lineOpacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">drawLine</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> circleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> circleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> circleArr<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> circleArr<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> lineOpacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">POINT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">drawCricle</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> circleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> circleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> circleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">POINT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> cir <span class="token operator">=</span> circleArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cir<span class="token punctuation">.</span>x <span class="token operator">+=</span> cir<span class="token punctuation">.</span>moveX<span class="token punctuation">;</span>            cir<span class="token punctuation">.</span>y <span class="token operator">+=</span> cir<span class="token punctuation">.</span>moveY<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cir<span class="token punctuation">.</span>x <span class="token operator">></span> <span class="token constant">WIDTH</span><span class="token punctuation">)</span> cir<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cir<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cir<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token constant">WIDTH</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cir<span class="token punctuation">.</span>y <span class="token operator">></span> <span class="token constant">HEIGHT</span><span class="token punctuation">)</span> cir<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cir<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cir<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token constant">HEIGHT</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="首行缩进-deprecated"><a href="#首行缩进-deprecated" class="headerlink" title="首行缩进(deprecated)"></a><del>首行缩进(deprecated)</del></h3><p>将.&#x2F;node_modules&#x2F;marked&#x2F;lib&#x2F;marked.js中的<code>Renderer.prototype.br = function()</code>部分修改为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Renderer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">br</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>xhtml <span class="token operator">?</span> <span class="token string">'&lt;br/>'</span> <span class="token operator">:</span> <span class="token string">'&lt;/p>&lt;p>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样可以保证每个文章的md中的换行符被转义为<code>&lt;p&gt;</code>标签。<br>然后，将<code>./themes/material/source/css/style.min.css</code>中的<code>#post-content p</code>部分修改为</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#post-content p</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.7<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，所有使用了post-content这个class的父元素中的p标签都会首行缩进两个字符。但是这样也影响了代码块。可以在<code>style.min.css</code>继续修改，也可以在<code>./themes/material/layout/_partial/config_css.ejs</code>中的<code>&lt;!-- Other Styles --&gt;</code>后的<code>&lt;style&gt;</code>标签中加上</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre</span><span class="token punctuation">&#123;</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> 0em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Slogan-x2F-欢迎语"><a href="#Slogan-x2F-欢迎语" class="headerlink" title="Slogan&#x2F;欢迎语"></a>Slogan&#x2F;欢迎语</h3><p>我使用了Hitokoto（一言·纯净）的API，将<code>./themes/material/_config.yml</code>中的<code>uiux</code>部分的<code>slogan</code>属性修改为</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">slogan: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hitokoto<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span>2px 2px 4px <span class="token function">rgb</span><span class="token punctuation">(</span>51<span class="token punctuation">,</span>51<span class="token punctuation">,</span>51<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>一言·Hitokoto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="首图-x2F-每日一图"><a href="#首图-x2F-每日一图" class="headerlink" title="首图&#x2F;每日一图"></a>首图&#x2F;每日一图</h3><p>在主题的<code>_config.yml</code>中</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Jump Links Settings</span><span class="token key atrule">url</span><span class="token punctuation">:</span>    <span class="token key atrule">rss</span><span class="token punctuation">:</span> /atom.xml    <span class="token key atrule">daily_pic</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.bing.com/gallery/    logo<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>为了可以通过<code>hexo d -g</code>命令直接发布到我的Github，需要将<code>./_config.yml</code>中的<code># Deployment</code>部分修改为</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span>    <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>gadfly3173/gadfly3173.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>为了使用PrismJs，需要先下载对应的CSS，然后在<code>./themes/material/layout/_partial/head.ejs</code>中添加</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- PrismJS --></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">cssLsload</span><span class="token punctuation">(</span><span class="token string">'css/prism.tomorrow-night.full.min.css'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并删除主题的<code>pre</code>标签的css</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在.&amp;#x2F;themes&amp;#x2F;material&amp;#x2F;layout&amp;#x2F;layout.ejs的&lt;code&gt;&amp;lt;bod</summary>
      
    
    
    
    <category term="建站" scheme="https://blog.gadfly.vip/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="纪实" scheme="https://blog.gadfly.vip/tags/%E7%BA%AA%E5%AE%9E/"/>
    
    <category term="建站" scheme="https://blog.gadfly.vip/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="HTML" scheme="https://blog.gadfly.vip/tags/HTML/"/>
    
    <category term="CSS" scheme="https://blog.gadfly.vip/tags/CSS/"/>
    
    <category term="备份" scheme="https://blog.gadfly.vip/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="JS" scheme="https://blog.gadfly.vip/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>一个比较完美的网页模板</title>
    <link href="https://blog.gadfly.vip/2018/05/perfect-html-template/"/>
    <id>https://blog.gadfly.vip/2018/05/perfect-html-template/</id>
    <published>2018-05-17T12:35:29.000Z</published>
    <updated>2022-02-16T10:21:03.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在制作网页的时候，我们常常需要在页面中出现：HEADER、CONTENT和FOOTER三大部分，而如何让他们三个呆在自己该呆着的地方困扰着很多人。</p></blockquote><span id="more"></span><p>首先，我们网页的内容不是固定的，用户的窗口大小也是不固定的，我们希望当内容不多的时候，网页能撑满全屏而不溢出，内容足够多的时候，每个东西能依次排好而不互相重叠。<br><img src="/images/227387.gif" data-original="/images/posts/2018/05/sticky-footer-1.svg"><br>同时，为了满足一些需求，比如在页面上任意位置点击就能出现一些效果，我们需要整个页面被元素填满。</p><blockquote><p>当你设置一个页面元素的高度(height)为100%时，期望这样元素能撑满整个浏览器窗口的高度，但大多数情况下，这样的做法没有任何效果。</p></blockquote><p>按常理，当我们用CSS的height属性定义一个元素的高度时，这个元素应该按照设定在浏览器的纵向空间里扩展相应的空间距离。例如，如果一个div元素的CSS是<code>height: 100px;</code>，那它应该在页面的竖向空间里占满100px的高度。<br>而根据W3C的规范，百分比的高度在设定时需要根据这个元素的父元素容器的高度来计算。所以，如果你把一个div的高度设定为<code>height: 50%;</code>，而它的父元素的高度是100px，那么，这个div的高度应该是50px。</p><h3 id="那为什么-height-100-不起作用"><a href="#那为什么-height-100-不起作用" class="headerlink" title="那为什么 height:100%; 不起作用"></a>那为什么 height:100%; 不起作用</h3><p>当设计一个页面时，你在里面放置了一个div元素，你希望它占满整个窗口高度，最自然的做法，你会给这个div添加<code>height: 100%;</code>的css属性。如果你要是设置宽度为<code>width: 100%;</code>，那这个元素的宽度会立刻扩展到窗口的整个横向宽度。然而，高度也会这样吗？</p><blockquote><p><strong>错。</strong></p></blockquote><p>为了理解为什么不会，我们需要理解浏览器是如何计算高度和宽度的。Web浏览器在计算有效宽度时会考虑浏览器窗口的打开宽度。如果你不给宽度设定任何缺省值，那浏览器会自动将页面内容平铺填满整个横向宽度。<br>但是高度的计算方式完全不一样。事实上，浏览器根本就不计算内容的高度，除非内容超出了视窗范围（导致滚动条出现）。或者你给整个页面设置一个绝对高度。否则，浏览器就会简单的让内容往下堆砌，页面的高度根本就无需考虑。<br>因为页面并没有缺省的高度值，所以，当你让一个元素的高度设定为百分比高度时，无法根据获取父元素的高度，也就无法计算自己的高度。换句话说，父元素的高度只是一个缺省值：<code>height: auto;</code>。当你要求浏览器根据这样一个缺省值来计算百分比高度时，只能得到<code>undefined</code>的结果。也就是一个<code>null</code>值，浏览器不会对这个值有任何的反应。<br>那么，如果想让一个元素的百分比高度<code>height: 100%;</code>起作用，你需要给这个元素的所有父元素的高度设定一个有效值。所以，你需要这样做：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        想让这个div高度为 100% 。      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你给了这个div的高度为100%，它有两个父元素&lt;body&gt;和&lt;html&gt;。为了让你的div的百分比高度能起作用，你必须设定&lt;body&gt;和&lt;html&gt;的高度。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        这样这个div的高度就会100%了      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们就可以解决让footer固定在底部的问题了。在查阅了很多资料之后，我选择了absolute定位，最终结果如下：<br>HTML：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 60pt<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.main</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 60pt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content</span><span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>    <span class="token property">max-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">;</span><span class="token selector">html,body</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里面中，main是整个页面的容器，将其最小高度设为100%可以保证整个页面都被元素填满，既可以保证footer可以通过<code>bottom: 0;</code>放在页面底部，也可以实现一些前文中提高的有趣功能。在<a href="https://tools.gadfly.vip/">https://tools.gadfly.vip</a>（我的工具箱网站）中可以体验一下，在它的页面上随意点击，会随机出现一些文字。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在制作网页的时候，我们常常需要在页面中出现：HEADER、CONTENT和FOOTER三大部分，而如何让他们三个呆在自己该呆着的地方困扰着很多人。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="建站" scheme="https://blog.gadfly.vip/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="HTML" scheme="https://blog.gadfly.vip/tags/HTML/"/>
    
    <category term="CSS" scheme="https://blog.gadfly.vip/tags/CSS/"/>
    
    <category term="布局" scheme="https://blog.gadfly.vip/tags/%E5%B8%83%E5%B1%80/"/>
    
    <category term="footer" scheme="https://blog.gadfly.vip/tags/footer/"/>
    
    <category term="网页" scheme="https://blog.gadfly.vip/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
</feed>
